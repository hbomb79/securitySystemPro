--User Input API Allowing For advanced text and number inputs that can be returned with buttons and events...


function doClick(event, btn, x, y, buttonTable) --Checks if click happened... Used for button inputs
	functionToRun = element.tryClick(buttonTable, x, y)
	if functionToRun then --Check click location
		functionToRun()
	end
end

function breakInputs()
	--Used to stop all inputs without returning, Used in HexAlarm when all inputs must be cancelled.
	LogFile.i('Running Break Inputs, uInput')
	os.queueEvent('uInputBreak')
end

function nRead(len, replaceChar) --Number ONLY Input, Returns with: enter key
  local _int = 1
  local _string = 'a'
  submitted = false
  LogFile.i('Number Input Called', 'uInput API') --Log Input Start
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
       local e,p1 = os.pullEvent()
		  if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		    Num = true
		  elseif type(p1) == type(_string) then
		    Num = "Word"
		  end
        if e=="char" and Num == true then
          if #input < len then
			term.setCursorBlink(true)
			input = input .. p1
			LogFile.i('Input Entered.')
			term.write(replaceChar or p1)
		  end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
		elseif e == 'uInputBreak' then return
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input --Return Typed Value
end

function eventN(len, replaceChar, buttonTable) --Number Only Event Input, Returns with: submit_Result
  local _int = 1
  local _string = 'a'
  submitted = false
  LogFile.i('Number Button Input Called', 'uInput API')
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        local e,p1, p2, p3 = os.pullEvent()
		  if e == "char" and p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		    Num = true
		  elseif e == "char" and type(p1) == type(_string) then
		    Num = "Word"
		  end
        if e=="char" and Num == true then
          if #input < len then
			input = input .. p1
			term.write(replaceChar or p1)
          end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        elseif e=="submit_Result" then
			submitted = true
			term.setCursorBlink(false)
			return input
		elseif e=="mouse_click" then
			doClick('mouse_click', p1, p2, p3, buttonTable)
		elseif e=='uInputBreak' then return
		end
  until submitted
  term.setCursorBlink(false)
  return input
end

function eventRead(len, replaceChar, buttonTable) --Any Key Read, Returns with: submit_Result
  submitted = false
  LogFile.i('Event Input Called', 'uInput API') --Log Input Start
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        event, p1, p2, p3 = os.pullEvent()
        if event=="char" then
          if #input < len then
			input = input .. p1
			term.write(replaceChar or p1)
          end
		  if #input >= len then term.setCursorBlink(false) end
        elseif event=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        elseif event == "submit_Result" then --Button Event
			submitted = true
			LogFile.i('Submit Result Called')
			term.setCursorBlink(false)
			return input
		elseif event == "mouse_click" then
			doClick('mouse_click', nil, p2, p3, buttonTable)
		elseif event == 'uInputBreak' then LogFile.i('Force Break') return
		end
  until submitted
  LogFile.w('False Return!')
  term.setCursorBlink(false)
end

function keyRead(len, replaceChar) --Any Key Read, Returns with: enter key
  submitted = false
  LogFile.i('Key Input Called', 'uInput API') --Log Input Start
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
       local e,p1 = os.pullEvent()
        if e=="char" then
		term.setCursorBlink(false)
          if #input < len then
			term.setCursorBlink(true)
			input = input .. p1
			term.write(replaceChar or p1)
		  end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
		elseif e == 'uInputBreak' or e == 'alert' then return
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input --Return Typed Value
end

function restrictedKeyRead(len, replaceChar, restrictedChars) --White listed Key Read, Returns with: enter key
  submitted = false
  blackListed = false
  LogFile.i('Restricted Key Input Called', 'uInput API') --Log Input Start
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
	   blackListed = false
       local e,p1 = os.pullEvent()
        if e=="char" then
		for _, blackListedChar in ipairs(restrictedChars) do
			if p1 == blackListedChar then blackListed = true end
		end
		term.setCursorBlink(false)
          if #input < len and blackListed == false then
			term.setCursorBlink(true)
			input = input .. p1
			term.write(replaceChar or p1)
		  end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
		elseif e == 'uInputBreak' then return
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input --Return Typed Value
end

function restrictedEventRead(len, replaceChar, buttonTable, restrictedChars) --White Listed Key Read, Returns with: submit_Result
  submitted = false
  blackListed = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
		blackListed = false
        event, p1, p2, p3 = os.pullEvent()
        if event=="char" then
		  for _, blackListedChar in ipairs(restrictedChars) do
			if tostring(p1) == tostring(blackListedChar) then blackListed = true end
		  end
          if #input < len and blackListed == false then
			input = input .. p1
			term.write(replaceChar or p1)
          end
		  if #input >= len then term.setCursorBlink(false) end
        elseif event=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        elseif event == "submit_Result" then --Button Event
			submitted = true
			term.setCursorBlink(false)
			return input
		elseif event == "mouse_click" then
			doClick('mouse_click', nil, p2, p3, buttonTable)
		elseif e == 'uInputBreak' then return
		end
  until submitted
  term.setCursorBlink(false)
end