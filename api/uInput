--User Input API Allowing For advanced text and number inputs that can be returned with buttons and events...


function doClick(event, btn, x, y, buttonTable) --Checks if click happened... Used for button inputs
	functionToRun = element.tryClick(buttonTable, x, y)
	if functionToRun then --Check click location
		functionToRun()
	end
end


function nRead(len, replaceChar) --Number ONLY Input, Returns with: enter key
  local _int = 1
  local _string = 'a'
  submitted = false
  LogFile.i('Number Input Called', runningProgram) --Log Input Start
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
       local e,p1 = os.pullEvent()
		  if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		    Num = true
		  elseif type(p1) == type(_string) then
		    Num = "Word"
		  end
        if e=="char" and Num == true then
          if #input < len then
			term.setCursorBlink(true)
			input = input .. p1
			term.write(replaceChar or p1)
		  end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input --Return Typed Value
end

function eventN(len, replaceChar, buttonTable) --Number Only Event Input, Returns with: submit_Result
  local _int = 1
  local _string = 'a'
  submitted = false
  LogFile.i('Number Button Input Called', runningProgram)
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        local e,p1, p2, p3 = os.pullEvent()
		  if e == "char" and p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		    Num = true
		  elseif e == "char" and type(p1) == type(_string) then
		    Num = "Word"
		  end
        if e=="char" and Num == true then
          if #input < len then
			input = input .. p1
			term.write(replaceChar or p1)
          end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        elseif e=="submit_Result" then
			submitted = true
			term.setCursorBlink(false)
			return input
		elseif e=="mouse_click" then
			doClick('mouse_click', p1, p2, p3, buttonTable)
		end
  until submitted
  term.setCursorBlink(false)
  return input
end

function eventRead(len, replaceChar, buttonTable) --Any Key Read, Returns with: submit_Result
  submitted = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        event, p1, p2, p3 = os.pullEvent()
        if event=="char" then
          if #input < len then
			input = input .. p1
			term.write(replaceChar or p1)
          end
		  if #input >= len then term.setCursorBlink(false) end
        elseif event=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        elseif event == "submit_Result" then --Button Event
			submitted = true
			term.setCursorBlink(false)
			return input
		elseif event == "mouse_click" then
			doClick('mouse_click', nil, p2, p3, buttonTable)
		end
  until submitted
  term.setCursorBlink(false)
end

function keyRead(len, replaceChar) --Any Key Read, Returns with: enter key
  submitted = false
  LogFile.i('Number Input Called', runningProgram) --Log Input Start
  Num = false
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
       local e,p1 = os.pullEvent()
        if e=="char" then
		term.setCursorBlink(false)
          if #input < len then
			term.setCursorBlink(true)
			input = input .. p1
			term.write(replaceChar or p1)
		  end
		  if #input >= len then term.setCursorBlink(false) end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
		  term.setCursorBlink(true)
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input --Return Typed Value
end