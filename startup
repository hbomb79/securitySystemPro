-- This script loads the APIs Required as well as checks for missing files and updates via GitHub
-- The Installer Will Check If The Computer is compatible

os.pullEvent = os.pullEventRaw

termX, termY = term.getSize()




if fs.exists("systemFiles/programs/configuration") then
  local f = fs.open("systemFiles/programs/configuration", "r")
  fileRun = f.readLine()
  f.close()
end


-- Fade In!
term.setBackgroundColour(colours.black)	
term.clear()
sleep(0.1)
term.setBackgroundColour(colours.grey)
term.clear()
sleep(0.1)
term.setBackgroundColour(colours.lightGrey)
term.clear()
sleep(0.1)

function RecieveStartupKey()
	while true do
	  local event, arg = os.pullEvent()
	  if event == 'BootDone' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or key == keys.rightAlt then
		bootKey = true
	  	return arg 
		end
	  end
	  
	end
end

function checkStartKey()
  term.setBackgroundColor(128)
  term.setTextColor(256)
  if bootKey then
    Boottext = "Entering Setup"
  else
    Boottext = "[alt] Setup"
  end
    term.setCursorPos(termX-(#Boottext+1), 1)
    write(Boottext)
  term.setBackgroundColor(256)
  term.setTextColor(1)
end


function initBackground(color) --Use To Quickly assemble GUI
  term.setBackgroundColor(color)
  term.clear()  
  drawTitleBar()
end

bootX = termX/2-7
bootY = termY/2-4

function beta() --Beta notify, Ran at end of script if it is a beta build
  term.setBackgroundColor(256)
  term.clear()
  drawTitleBar()
  checkStartKey()
  term.setBackgroundColor(256)
  term.setTextColor(1)
  printer.centered("Please remember that this is a BETA build", 6)
  printer.centered("Various Bugs, Flaws and Security Vulnerabilities", 7)
  printer.centered("Will Pop Up", 8)
  printer.centered("But dont worry, The software auto updates", 10)
  printer.centered("so you will always enjoy the most up-to-date", 11)
  printer.centered("version!", 12)
  printer.centered("Thanks for using the suite!", 14)
  printer.centered("Press ANY Key To Continue", 19)
  event, key = os.pullEvent("key")
end

-- Loads All Boot Images
BL0 = paintutils.loadImage("systemFiles/BootLogos/boot0.nfp")
BL1 = paintutils.loadImage("systemFiles/BootLogos/boot1.nfp")
BL2 = paintutils.loadImage("systemFiles/BootLogos/boot2.nfp")
BL3 = paintutils.loadImage("systemFiles/BootLogos/boot3.nfp")
BL4 = paintutils.loadImage("systemFiles/BootLogos/boot4.nfp")
BL5 = paintutils.loadImage("systemFiles/BootLogos/boot5.nfp")
BL6 = paintutils.loadImage("systemFiles/BootLogos/boot6.nfp")
BL7 = paintutils.loadImage("systemFiles/BootLogos/boot7.nfp")
BL8 = paintutils.loadImage("systemFiles/BootLogos/boot8.nfp")
BLFinal = paintutils.loadImage('systemFiles/bootFail.nfp')




function bootLogo (state, x, y, bgcolor)
  if state == 0 then
    paintutils.drawImage(BL0, x, y)
  elseif state == 1 then
    paintutils.drawImage(BL1, x, y)
  elseif state == 2 then
    paintutils.drawImage(BL2, x, y)
  elseif state == 3 then
    paintutils.drawImage(BL3, x, y)
  elseif state == 4 then
    paintutils.drawImage(BL4, x, y)
  elseif state == 5 then
    paintutils.drawImage(BL5, x, y)
  elseif state == 6 then
    paintutils.drawImage(BL6, x, y)
  elseif state == 7 then
    paintutils.drawImage(BL7, x, y)
  elseif state == 8 then
    paintutils.drawImage(BL8, x, y)
  elseif state == 9 then
    paintutils.drawImage(BLFinal, x, y)
  end
  term.setBackgroundColor(bgcolor)
end


function PrintCentered(text, y)
	local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
	term.clearLine()
    write(text)
end


if not fs.exists("systemFiles/Security/adminPass") then
  PrintCentered("SECURITY VULNERABLITLTY NOTICE", 4)
  PrintCentered("The Administrator Password Has Not Been Set", 6)
  PrintCentered("Please Set It Below, You Can Change It", 7)
  PrintCentered("Whilst Booting If You Press [ALT]", 8)
  local adminPassText = "Password: "
  term.setCursorPos(termX/2-(#adminPassText), 10)
  write(adminPassText)
  adminPassIn = read("*")
  PrintCentered("Saving Password...", 19)
  sleep(0.5)
  PrintCentered("Opening File Handle", 19)
  sleep(0.5)
  local f = fs.open("systemFiles/Security/adminPass", "w")
  PrintCentered("File Handle Open", 19)
  sleep(0.5)
  PrintCentered("Writing To File", 19)
  f.writeLine(adminPassIn)
  PrintCentered("Complete", 19)
  sleep(1)
  os.reboot()
end


function loadAPIs()  --Auto Loads ALL APIs It Can As Long As They Are In /api
  local screenWidth, screenHeight = term.getSize()
  local x = (screenWidth - 14) / 2
  local y = (screenHeight - 9) / 2
  drawTitleBar()
  checkStartKey()
  local currentImage = -1
	local total = #fs.list("/api")
	term.setBackgroundColor(256)
	PrintCentered("Loading APIs", 17)
	for _, fileApi in pairs(fs.list('/api')) do
	checkStartKey()
		if string.sub(fileApi,1,1) ~= "." then
			if math.floor(_*(8/total)) ~= currentImage then
				currentImage = math.floor(_*(8/total))
				local image = paintutils.loadImage('systemFiles/BootLogos/boot'..currentImage..'.nfp')
				paintutils.drawImage(image, bootX, bootY)
			end		
			if os.loadAPI('/api/'..fileApi) then
			sleep(0)
			term.setBackgroundColor(256)
			term.setTextColor(colors.white)
            term.setCursorPos(1,19)
			term.clearLine()
			term.setCursorPos(1,18)
			term.clearLine()
			PrintCentered(fileApi.." Loaded!", 18)
		    else
			  error ("Error Occurred Whilst Loading API: "..fileApi)
			end
		end
	end
	sleep(0.1)
	term.clear()
	initBackground(256)
	drawTitleBar()
	checkStartKey()
	return true
end

function drawTitleBar()
  term.setBackgroundColor(128)
  term.setCursorPos(1,1)
  term.clearLine()
  term.setTextColor(colors.cyan)
  write "HbombOS Security Suite"
  term.setCursorPos(1,2)
  term.clearLine()
  term.setTextColor(256)
  write "Startup"
end



function main() --The main function, calls all child functions
  --First all APIs must be loaded to perform the system checks later on
  loadAPIs()
  term.setBackgroundColor(256)
  term.setTextColor(1)
  checkStartKey()
  bootLogo(1, bootX, bootY, 256)
  PrintCentered("Checking For Colour Support", 18)
  if systemCheck.checkColor() then PrintCentered("Computer Supports Colour", 19) end
  bootLogo(3, bootX, bootY, 256)
  sleep(0)
  bootLogo(4, bootX, bootY, 256)
  PrintCentered("Checking If Pocket", 18)
  sleep(0)
  if systemCheck.checkPocket() then
  bootLogo(6, bootX, bootY, 256)
  PrintCentered("Computer Is Not Pocket", 19)
  end
  checkStartKey()
  sleep(0)
  bootLogo(7, bootX, bootY, 256)
  PrintCentered("Checking If Supports HTTP", 18)
  sleep(0.5)
  bootLogo(8, bootX, bootY, 256)
  if systemCheck.checkhttp() then PrintCentered("System Check Complete!", 19) end
  sleep(0)
  PrintCentered("", 19)
  PrintCentered("Checking For Updates", 18)
  sleep(1)
  if update.Check() then
  checkStartKey()
    PrintCentered("An Update Has Been Detected", 19)
	sleep(0)
    PrintCentered("Obtaining Latest Update From GitHub", 18)
	PrintCentered("Seeking URL", 19)
	sleep(1)
	PrintCentered("Parsed", 19)
	sleep(0)
	PrintCentered("Downloading New Updater", 19)
	download.git("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/systemFiles/Install/updater", "systemFiles/Install/updater")
	sleep(0)
	PrintCentered("Download Complete, Running Updater",18)
	sleep(0)
	shell.run("systemFiles/Install/updater")
  elseif not update.Check() then
  checkStartKey()
    PrintCentered("You Are Running The Latest BETA Version!", 19)
	beta() --Remove when no longer a BETA build!
	printer.centered("Reading Config File..", 19)
	sleep(0.1)
	--[[if fileRun then
	  shell.run(fileRun)
	end]]--
	printer.centered("No Default File Stored", 19)
	return true
  end
end

function bootMenu()
  term.clear()
  printer.centered("Welcome To The Security Suite BootMenu", 6)
  printer.centered("You Are Here Because [alt] Was Pressed During Boot", 8)
  printer.centered("Type In The Admin Password Below", 10)
  printer.centered("Or Hold CTRL+R To Reboot", 11)
  bootMenuText = "Admin Pass: "
  term.setCursorPos(termX/2-(#bootMenuText), 13)
  write (bootMenuText)
  input = read()
end

function Start()
    local key = nil
	local success = false
	parallel.waitForAll(function()success = main() os.queueEvent('BootDone') end, function() key = RecieveStartupKey() end)
	if success and key == keys.leftAlt or key == keys.rightAlt then
      success = bootMenu()
	end
	  return success
  end
   


term.setBackgroundColor(256)
term.clear()
drawTitleBar()
Start()
--main()

