-- This script loads the APIs Required as well as checks for missing files and updates via GitHub
-- The Installer Will Check If The Computer is compatible
os.pullEvent = os.pullEventRaw
termX, termY = term.getSize()

-- Fade In!
term.setBackgroundColour(colours.black)	
term.clear()
sleep(0.1)
term.setBackgroundColour(colours.grey)
term.clear()
sleep(0.1)
term.setBackgroundColour(colours.lightGrey)
term.clear()
sleep(0.1)

function RecieveStartupKey()
	while true do
	  local event, arg = os.pullEvent()
	  if event == 'BootDone' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or key == keys.rightAlt then
		bootKey = true
		checkStartKey()
	  	return arg 
		end
	  end
	  
	end
end

function checkStartKey()
  term.setBackgroundColor(128)
  term.setTextColor(256)
  if bootKey then
    Boottext = "Entering Setup"
  else
    Boottext = "[alt] Setup"
  end
    term.setCursorPos(termX-(#Boottext+1), 1)
    write(Boottext)
  term.setBackgroundColor(256)
  term.setTextColor(1)
end

function initBackground(color) --Use To Quickly assemble GUI
  term.setBackgroundColor(color)
  term.clear()  
  drawTitleBar()
end

function start()
  printer.centered("Password Changer", 4)
  printer.centered("Here you may change your admin password", 6)
  printer.centered("In just a few simple clicks and hits...", 7)
end

function newPassword2()
	while newPassword2Wait do
	  term.clear()
	  start()
	  printer.centered("Re-type your new password", 10)
	  local newPassConfirm = "New Pass Again: "
	  term.setCursorPos(termX/2-#newPassConfirm, 12)
	  write (newPassConfirm)
	  newPass = read("*")
	  if newPass == newPass1 then break else printer.centered("Passwords Don't Match!", 19) sleep(0.6) newPassword() end
    end
  save(newPass)
end
		  
function newPassword()
  while newPassWait do
    term.clear()
	start()
	printer.centered("Type your new password", 10)
	local newPassText = "New Pass: "
	term.setCursorPos(termX/2-#newPassText, 12)
	write (newPassText)
	newPass1 = read("*")
	if newPass1 == "" or newPass1 == nil then 
	  printer.centered("Cannot Be NIL!", 19)
	elseif newPass1 ~= "" or newPass ~= nil then
	  printer.centered("Accepted", 19) 	  
	  newPassword2()
	else
	  errora.err("generic", "Unknown Exception, Cannot Handle Input: "..newPass1)
	end
  end
end
		  
		  
function oldPassword()
  while oldPassWait do 
    printer.centered("Type your current password to get started", 10)
	local oldPassText = "Current Pass: "
    term.setCursorPos(termX/2-#oldPassText, 12)
	write(oldPassText)
	oldPass = read("*")
	if oldPass == adminPassword then oldPassWait = false break end
    end
    newPassword()
end
		  
		 
function save(password)
  if password then
	printer.centered("Saving!", 18)
	sleep(0)
	printer.centered("Opening File Handler", 19)
	sleep(0)
	local f = fs.open('systemFiles/Security/adminPass', "w")
	printer.centered("Preparing Write", 19)
	sleep(0)
	printer.centered("Writing To File", 19)
	sleep(0)
	f.writeLine(password)
	printer.centered("File Data Written", 19)
	sleep(0)
    printer.centered("Closing File Handler", 19)
	sleep(0)
	f.close()
	printer.centered("Data Saved", 19)
	sleep(0)
	printer.centered("Done... Rebooting", 19)
    sleep(2)
    os.reboot()
  else
	errora.err("generic", "Save Data invalid / NIL")
  end
end



bootX = termX/2-7
bootY = termY/2-4
function beta() --Beta notify, Ran at end of script if it is a beta build
  term.setBackgroundColor(256)
  term.clear()
  drawTitleBar()
  term.setBackgroundColor(256)
  term.setTextColor(1)
  printer.centered("Please remember that this is a WIP", 6)
  printer.centered("This means only one program is available...", 7)
  printer.centered("The PIN Program", 8)
  printer.centered("But dont worry, The software auto updates", 10)
  printer.centered("so you will always enjoy the most up-to-date", 11)
  printer.centered("version!", 12)
  printer.centered("Thanks for using the suite!", 14)
  printer.centered("Press ANY Key To Continue", 19)
  event, key = os.pullEvent("key")
end
-- Loads All Boot Images
BL0 = paintutils.loadImage("systemFiles/BootLogos/boot0.nfp")
BL1 = paintutils.loadImage("systemFiles/BootLogos/boot1.nfp")
BL2 = paintutils.loadImage("systemFiles/BootLogos/boot2.nfp")
BL3 = paintutils.loadImage("systemFiles/BootLogos/boot3.nfp")
BL4 = paintutils.loadImage("systemFiles/BootLogos/boot4.nfp")
BL5 = paintutils.loadImage("systemFiles/BootLogos/boot5.nfp")
BL6 = paintutils.loadImage("systemFiles/BootLogos/boot6.nfp")
BL7 = paintutils.loadImage("systemFiles/BootLogos/boot7.nfp")
BL8 = paintutils.loadImage("systemFiles/BootLogos/boot8.nfp")
BLFinal = paintutils.loadImage('systemFiles/bootFail.nfp')

function bootLogo (state, x, y, bgcolor)
  if state == 0 then
    paintutils.drawImage(BL0, x, y)
  elseif state == 1 then
    paintutils.drawImage(BL1, x, y)
  elseif state == 2 then
    paintutils.drawImage(BL2, x, y)
  elseif state == 3 then
    paintutils.drawImage(BL3, x, y)
  elseif state == 4 then
    paintutils.drawImage(BL4, x, y)
  elseif state == 5 then
    paintutils.drawImage(BL5, x, y)
  elseif state == 6 then
    paintutils.drawImage(BL6, x, y)
  elseif state == 7 then
    paintutils.drawImage(BL7, x, y)
  elseif state == 8 then
    paintutils.drawImage(BL8, x, y)
  elseif state == 9 then
    paintutils.drawImage(BLFinal, x, y)
  end
  term.setBackgroundColor(bgcolor)
end

function PrintCentered(text, y)
	local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
	term.clearLine()
    write(text)
end

if not fs.exists("systemFiles/Security/adminPass") then
while true do
  PrintCentered("SECURITY VULNERABLITLTY NOTICE", 4)
  PrintCentered("The Administrator Password Has Not Been Set", 6)
  PrintCentered("Please Set It Below, You Can Change It", 7)
  PrintCentered("Whilst Booting If You Press [ALT]", 8)
  adminPassText = "Password: "
  term.setCursorPos(termX/2-(#adminPassText), 10)
  write(adminPassText)
  adminPassIn = read("*")
  if adminPassIn ~= "" then
    PrintCentered("Saving Password...", 19)
    sleep(0)
    PrintCentered("Opening File Handle", 19)
    local f = fs.open("systemFiles/Security/adminPass", "w")
    PrintCentered("File Handle Open", 19)
    PrintCentered("Writing To File", 19)
    f.writeLine(adminPassIn)
    PrintCentered("Complete", 19)
	break
  end
end
  if fs.exists('systemFiles/Install/updateConfig') then
    os.reboot()
  end
else --The Files Exists
  local file = fs.open("systemFiles/Security/adminPass", "r")
  adminPassword = file.readLine()
  file.close()
end

function saveUpdate()
  local f = fs.open('systemFiles/Install/updateConfig', 'w')
  f.writeLine(tostring(quietUse))
  f.close()
  sleep(0)
  PrintCentered("Settings Saved, Setting set to: "..tostring(quietUse), 19)
  sleep(1)
  os.reboot()
end

if not fs.exists('systemFiles/Install/updateConfig') then
  term.clear()
  PrintCentered("Updater Mode Selection", 4)
  PrintCentered("Would you like the enable quiet updating", 6)
  PrintCentered("which will prevent the updater asking you for", 7)
  PrintCentered("your decision on whether you would like to update", 8)
  PrintCentered("Instead, it will do it automatically!", 9)
  PrintCentered("Press Y to enable or N to disable this setting", 11)
  updateLoop = true
  while updateLoop do
    event, press = os.pullEvent("key")
      if press == keys.y then
        quietUse = true
		saveUpdate()
	  elseif press == keys.n then
	    quietUse = false
		saveUpdate()
      end
  end
end

function loadAPIs()  --Auto Loads ALL APIs It Can As Long As They Are In /api
  drawTitleBar()
  local currentImage = -1
	local total = #fs.list("/api")
	term.setBackgroundColor(256)
	PrintCentered("Loading APIs", 17)
	for _, fileApi in pairs(fs.list('/api')) do
		if string.sub(fileApi,1,1) ~= "." then
			if math.floor(_*(8/total)) ~= currentImage then
				currentImage = math.floor(_*(8/total))
				local image = paintutils.loadImage('systemFiles/BootLogos/boot'..currentImage..'.nfp')
				paintutils.drawImage(image, bootX, bootY)
			end		
			if os.loadAPI('/api/'..fileApi) then
			sleep(0)
			term.setBackgroundColor(256)
			term.setTextColor(colors.white)
            term.setCursorPos(1,19)
			term.clearLine()
			term.setCursorPos(1,18)
			term.clearLine()
			PrintCentered(fileApi.." Loaded!", 18)
		    else
			  error ("Error Occurred Whilst Loading API: "..fileApi)
			end
		end
	end
	sleep(0.1)
	term.clear()
	initBackground(256)
	drawTitleBar()
	return true
end

function drawTitleBar()
  term.setBackgroundColor(128)
  term.setCursorPos(1,1)
  term.clearLine()
  term.setTextColor(colors.cyan)
  write "HbombOS Security Suite"
  term.setCursorPos(1,2)
  term.clearLine()
  term.setTextColor(256)
  write "Startup"
  checkStartKey()
end


function programMenu()
    drawTitleBar()
    term.setTextColor(1)
    term.setBackgroundColor(256)
    term.clear()
	PrintCentered("HbombOS Security Suite", 2)
	PrintCentered("Programs", 3)
	PrintCentered("The Suite Offers Several Programs For You To Use", 5)
	PrintCentered("Select One You Would Like To Use", 6)
	PrintCentered("You Can Change It At Any Time Using The BootMenu", 7)
	PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
	local continue = false
	local options = {
		{'PIN', function()
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/pin')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end},
		{'Digital Lock', function() 
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/dualKey')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end}, 
		{'Reactor Control', function() 
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/reactor')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end},
		{'Keycard Lock', function()
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/keycard')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end},
		{'PDA Range Lock', function()
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/rangeLock')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end},
		{'Dual KeyCard Lock', function()
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/keycardDual')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end},	
		{'OpenP Detector Lock', function()
		  term.setTextColor(1)
		  printer.centered("Opening File Handler", 19)
		  sleep(0)
		  local f = fs.open('systemFiles/Programs/configuration', "w")
		  printer.centered("File Handler Open", 19)
		  sleep(0)
		  printer.centered("Writing To File", 19)
		  sleep(0)
		  f.writeLine('systemFiles/Programs/OpenPDetect')
		  printer.centered("File written", 19)
		  sleep(0)
		  printer.centered("Closing Handler", 19)
		  f.close()
		  printer.centered("Saved, Rebooting!", 19)
		  sleep(2)
		  os.reboot()
		end}
	}

	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 6)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
		  options[selected][2]()
		  wait = false
		end
		draw()
	end
	return continue
end

function programCheckConfig()
  if not fs.exists('systemFiles/Programs/configuration') then programMenu() else
    local f = fs.open('systemFiles/Programs/configuration', "r")
	programStart = f.readLine()
	f.close()
	if not programStart then programMenu() else
	  if programStart == "" then programMenu() else 
	    local f = fs.open('systemFiles/Programs/configuration', 'r')
		fileStartup = f.readLine()
		f.close()
	  end
	end
  end
end


function main() --The main function, calls all child functions
  --First all APIs must be loaded to perform the system checks later on
  i = 0
  loadAPIs()
  programCheckConfig()
  term.setBackgroundColor(256)
  term.setTextColor(1)
  bootLogo(1, bootX, bootY, 256)
  PrintCentered("Checking For Colour Support", 18)
  if systemCheck.checkColor() then PrintCentered("Computer Supports Colour", 19) end
  bootLogo(3, bootX, bootY, 256)
  sleep(0)
  bootLogo(4, bootX, bootY, 256)
  PrintCentered("Checking If Pocket", 18)
  sleep(0)
  if systemCheck.checkPocket() then
  bootLogo(6, bootX, bootY, 256)
  PrintCentered("Computer Is Not Pocket", 19)
  end
  sleep(0)
  bootLogo(7, bootX, bootY, 256)
  PrintCentered("Checking If Supports HTTP", 18)
  sleep(0)
  bootLogo(8, bootX, bootY, 256)
  if systemCheck.checkhttp() then PrintCentered("System Check Complete!", 19) end
  sleep(0)
  PrintCentered("", 19)
  updateChecker()
  return true
end

function latestVer()
    PrintCentered("You Are Running The Latest STABLE Version!", 19)
	printer.centered("Reading Config File..", 19)
	sleep(0.1)
	return true
end

function updateAvail()
    PrintCentered("An Update Has Been Detected", 6)
	sleep(0)
    PrintCentered("Obtaining Latest Update From GitHub", 18)
	PrintCentered("Seeking URL", 19)
	sleep(0)
	PrintCentered("Parsed", 19)
	sleep(0)
	PrintCentered("Downloading New Updater", 19)
	if not download.git("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/systemFiles/Install/updater", "systemFiles/Install/updater") then printer.centered('Error Occured While Downloading Updater!', 19) sleep(1) os.reboot() end
	PrintCentered("Download Complete, Running Updater",18)
	local f = fs.open('systemFiles/Install/updateConfig', 'r')
	useSettingQuiet = f.readLine()
	f.close()
	if useSettingQuiet == "true" then shell.run("systemFiles/Install/updater", "quiet") elseif useSettingQuiet == "false" then shell.run("systemFiles/Install/updater") else errora.err(nil, "The Updater Launch Script Failed To Launch the Updater, Returned: "..tostring(useSettingQuiet)) end
	  if request_code == 'Cancelled' then
	    return 'Cancel'
	  elseif request_code == 'Error' then
	    i = i + 1
		if i < 4 then
	      term.setBackgroundColor(256)
	      term.clear()
          drawTitleBar()
          printer.centered('The Updater Is Experiencing Issues', 6)
          printer.centered('Please Ensure You Are Connected To The Internet', 8)
          printer.centered('If You Have An Active Internet Connection', 10)
          printer.centered('Then Report On Forum Page', 11)
          printer.centered('Retry Attempt: '..i, 19)
          sleep(3)
		else
		  term.setBackgroundColor(256)
	      term.clear()
          drawTitleBar()
          printer.centered('The Updater Isnt Able To Connect', 6)
          printer.centered('Due To Retrying 3 Times, The System Has', 8)
          printer.centered('Decided To Skip The Update...', 10)
          printer.centered('Please Connect To Internet', 11)
          for x = 3, 1, -1 do
		    if x == 1 then
		      printer.centered('Skipping In: '..x..' Second', 19)
			elseif x > 1 then
			  printer.centered('Skipping In: '..x..'Seconds', 19)
			else break end
			sleep(1)
		  end
		  return 'Cancel'
		end
		return 'Error'
	  end
end

function updateChecker()
  while true do
	term.setBackgroundColor(256)
	term.clear()
    drawTitleBar()
	printer.centered('Checking For Software Updates', 6)
	printer.centered('Please Wait...', 19)
    updateState = update.Check()
    if updateState == true then
      if updateAvail() == 'Cancel' then
	    break
	  end
    elseif updateState == false then
  	  break
    elseif updateState == 'ERROR' then
	  i = i + 1
		if i < 4 then
	      term.setBackgroundColor(256)
	      term.clear()
          drawTitleBar()
          printer.centered('The Updater Is Experiencing Issues', 6)
          printer.centered('Please Ensure You Are Connected To The Internet', 8)
          printer.centered('If You Have An Active Internet Connection', 10)
          printer.centered('Then Report On Forum Page', 11)
          printer.centered('Retry Attempt: '..i, 19)
          for x = 3, 1, -1 do
		    if x == 1 then
		      printer.centered('Retrying In: '..x..' Second', 19)
			elseif x > 1 then
			  printer.centered('Retrying In: '..x..' Seconds', 19)
			else break end
			sleep(1)
		  end
		else
		  term.setBackgroundColor(256)
	      term.clear()
          drawTitleBar()
          printer.centered('The Updater Isnt Able To Connect', 6)
          printer.centered('Due To Retrying 3 Times, The System Has', 8)
          printer.centered('Decided To Skip The Update...', 10)
          printer.centered('Please Connect To Internet', 11)
          printer.centered('When Possible', 12)
          for x = 5, 1, -1 do
		    if x == 1 then
		      printer.centered('Skipping In: '..x..' Second', 19)
			elseif x > 1 then
			  printer.centered('Skipping In: '..x..' Seconds', 19)
			else break end
			sleep(1)
		  end
		  return 'Cancel'
		 end
    else
      error 'Error Occured When Updating'
    end
  end
  return true
end

function bootMenu()
while true do
  term.clear()
  titleBar.draw("HbombOS Security Suite", "BIOS Login", colors.cyan, 256, 128, 256, 1)
  function adminPasswordE()
    PrintCentered("HbombOS Security Suite", 4)
    PrintCentered("Boot Options", 5)
    PrintCentered("Type In Admin Password To Continue", 18)
    PrintCentered("Or Reboot (CTRL+R) To Cancel", 19)
    adminPassText = "Password: "
    term.setCursorPos(termX/2-#adminPassText, 7)
    write (adminPassText)
    local input = read("*")
      if input == adminPassword then 
  	    return true
	  end
  end
  if adminPasswordE() then 
    return true
  else
    printer.centered("Incorrect!", 8)
	sleep(0.5)
  end
end

end

function bootMenuOptions(continue)
    if not bootMenu() then bootMenu() end
    term.setTextColor(1)
    term.setBackgroundColor(256)
    term.clear()
    titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
	PrintCentered("HbombOS Security Suite", 4)
	PrintCentered("Boot Options", 5)
	PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
	local continue = false
	local options = {
	    {'Reset Settings', function() 
		term.clear()
		PrintCentered("Removing Settings", 6)
		sleep(0)
		PrintCentered("Removing Administrator Password", 18)
		sleep(1)
		if fs.exists('/systemFiles/Security/adminPass') then fs.delete('/systemFiles/Security/adminPass') end 
		PrintCentered("Removing Program Settings", 18)
		sleep(0.2)
		if fs.exists('/systemFiles/Programs/pinConfig') then fs.delete ('systemFiles/Programs/pinConfig') end
		PrintCentered("Removing Reactor Configuration", 18)
		sleep(0)
		if fs.exists('/systemFiles/Programs/reactorConfig') then fs.delete ('systemFiles/Programs/reactorConfig') end
		PrintCentered("Removing Keycard Configuration", 18)
		sleep(0)
		if fs.exists('/systemFiles/Programs/keycardConfig') then fs.delete ('systemFiles/Programs/keycardConfig') end
		PrintCentered("Removing DualKey Configuration", 18)
		sleep(0.5)
		if fs.exists('/systemFiles/Programs/dualKeyConfig') then fs.delete ('systemFiles/Programs/dualKeyConfig') end
		PrintCentered("Removing KeyCard Dual Configuration", 18)
		sleep(0.5)		
		if fs.exists('/systemFiles/Programs/KeyDualConfig') then fs.delete ('systemFiles/Programs/KeyDualConfig') end
		PrintCentered("Removing RangeLock Configuration", 18)
		sleep(0.5)
		if fs.exists('/systemFiles/Programs/rangeLockSettings') then fs.delete ('systemFiles/Programs/rangeLockSettings') end
		PrintCentered("Removing Updater Configuration", 18)
		sleep(1)
	    if fs.exists('/systemFiles/Install/updateConfig') then fs.delete ('systemFiles/Install/updateConfig') end
		PrintCentered("Removing System Configuration", 18)
		sleep(2)
		if fs.exists('/systemFiles/Programs/configuration') then fs.delete ('systemFiles/Programs/configuration') end
		PrintCentered("Settings Reset, Rebooting!", 18)
		sleep(2)
		os.reboot()
		end},
		
		{'Uninstall Security Suite', function()
			term.setCursorPos(1,1)
			term.setBackgroundColor(256)
			term.setTextColor(colours.white)
			term.clear()
			titleBar.draw("HbombOS BIOS", "Uninstaller", colors.cyan, 256, 128, 256, 1)
			printer.centered("Please Wait While We Uninstall Security Suite 2014", 6)
			sleep(4)
			local function rmFold(path)
				if path == '/rom' or path == "/openp" then
					return
				end
				for i, v in ipairs(fs.list(path)) do
				 sleep(0.5)
				  term.setTextColor(1)
				  term.setBackgroundColor(256)
					if fs.isDir(path..'/'..v) then
						rmFold(path..'/'..v)
					else
						if fs.delete(path..'/'..v) then
						  term.setTextColor(1)
						  PrintCentered('Removed: '..path..'/'..v, 18)
						  sleep(0.5)
						end
					end
				end
				if path ~= '' then
					fs.delete(path)
				end
			end
			rmFold('')
			
		end},
		{'Use Shell/CraftOS', function() term.setBackgroundColor(colors.black) term.clear() term.setCursorPos(1,1) shell.run ("shell") end},
		{'Change Admin Password', function()  
		 term.clear()
		 titleBar.draw("HbombOS Security Suite", "Password Management", colors.cyan, 256, 128, 256, 1)
		 newPassword2Wait = true
		 newPassWait = true
		 oldPassWait = true
		 start()
		 oldPassword()
		 errora.err("generic", "Password Changer CRASH Report If Not Your Fault")
		end},
		{'Force Update', function() 
		  term.clear()
		  titleBar.draw("HbombOS Security Suite", "Force Updating", colors.cyan, 256, 128, 256, 1)
	   	  printer.centered("Downloading New Update Firmware", 19) 
		  printer.centered("Force Updating Client", 6) 
          sleep(1)
		  download.git("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/systemFiles/Install/updater", "systemFiles/Install/updater") 
		  printer.centered("Running Updater", 19) 
		  sleep(0)
		  shell.run("systemFiles/Install/updater") 
		  sleep(4)
		  errora.err("Updater Crash", "The Updater Encountered A Problem And Returned")
		end},
		{'Change Startup File', function() programMenu() end},
		{'Continue Boot', function() continue = true end}

	}

	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 4)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
			if options[selected][1] == 'Uninstall Security Suite' then
			  term.setTextColor(1)
              term.setBackgroundColor(256)
              term.clear()
			  titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
	          PrintCentered("HbombOS Security Suite", 4)
	          PrintCentered("Boot Options", 5)
	          PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
	          PrintCentered("Are You Sure, ALL Files Will Be Removed", 10)
	          PrintCentered("Including Files Not From Security Suite", 11)
	          PrintCentered("Y To Continue, N To Cancel", 15)
			  PrintCentered("", 19)
				local _ = true
				while _ do
					local ev, key = os.pullEvent('char')
					if key == 'y' then
					    sleep(0)
						term.clear()
						term.setTextColor(1)
						term.setBackgroundColor(256)
					    titleBar.draw("HbombOS Security Suite", "Uninstall", colors.cyan, 256, 128, 256, 1)
						PrintCentered("Removing HbombOS Security Suite", 6)
						options[selected][2]()
						term.clear()
					    titleBar.draw("HbombOS Security Suite", "Uninstall", colors.cyan, 256, 128, 256, 1)
						printer.centered("Thanks For Using Security Suite", 6)
						printer.centered("If Bugs Made You Uninstall, Please Report Them!", 8)
						printer.centered("Click Anywhere On-screen To Reboot", 19)
					    os.pullEvent("mouse_click")
						os.reboot()
					elseif key == 'n' then
						_ = false
						term.clear()
						titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
				        PrintCentered("HbombOS Security Suite", 4)
	                    PrintCentered("Boot Options", 5)
	                    PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
						--bootMenuOptions(true)
					end
				end
				term.setTextColor(colors.red)
				term.setBackgroundColor(colors.white)
				PrintCentered('                          ', 0)
				term.setTextColor(1)
				term.setBackgroundColor(256)
			else
				options[selected][2]()
				wait = false
			end
		end
		draw()
	end
	term.setTextColor(colors.white)
	printer.centered("Continuing Boot...", 19)
	sleep(0.1)
	printer.centered("Returning continue Variable", 19)
	return continue
end

function Start()
  checkStartKey()
  local key = nil
  local success = false
  parallel.waitForAll(function()success = main() os.queueEvent('BootDone') end, function() key = RecieveStartupKey() end)
	if success and key == keys.leftAlt or key == keys.rightAlt then
      success = bootMenuOptions()
	end
	  return success
  end
   
function readFiles()
  printer.centered("Reading Configuration Files", 19)
  local f = fs.open('systemFiles/Programs/configuration', 'r') --Opens Config
  fileStartup = f.readLine()
  f.close()
  	if fileStartup then --Checks If The User Has A File Chosen
	  printer.centered("Running: "..fileStartup, 19)
	  --shell.run(''..fileStartup..'')
	  shell.run(fileStartup) --Runs User Specified Program
	  sleep(4)
	  errora.err("Uh Oh! Something Went Horribly Wrong", "The Program: "..fileStartup.." Appears To Have Crashed") --Preliminary BSoD Catching Program Closure
	end
  printer.centered("No Default File Stored", 19)
  sleep(1)
  os.reboot() --Reboots So User Can Pick There Program
end

function initialise() --Function Used To Trace Error Catching
  term.setBackgroundColor(256)
  term.clear()
  drawTitleBar()
  if Start() then 
    readFiles() 
  else 
    errora.err("Uh Oh! Booting Failed", "The start-up process failed when waiting") 
  end
end

local _, err = pcall(initialise) --Error Catching, All Functions Are Called From initialise() at some point...
  if err then
    term.setCursorBlink(false)
	errora.err(err, 'Startup Has Crashed! Please Report Above Error', true) --BSoD for protection, the 'true' is an auto-reboot option to prevent the door waiting for a prompt
  end