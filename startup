-- This script loads the APIs Required as well as checks for missing files and updates via GitHub
-- The Installer Will Check If The Computer is compatible
runningProgram = shell.getRunningProgram()
os.pullEvent = os.pullEventRaw
termX, termY = term.getSize()
os.loadAPI('api/LogFile')
os.loadAPI('api/systemCheck')
systemCheck.checkhttp()
-- Fade In!
LogFile.Initialise()
LogFile.i('Loading Boot Screen', runningProgram)
LogFile.i('Fading Screen', runningProgram)
term.setBackgroundColour(colours.black)	
term.clear()
sleep(0.1)
term.setBackgroundColour(colours.grey)
term.clear()
sleep(0.1)
term.setBackgroundColour(colours.lightGrey)
term.clear()
sleep(0.1)



configFiles = {
	"systemFiles/Security/adminPass",
	"systemFiles/Install/updateConfig",
	"systemFiles/debugConfig"
}

for _, file in ipairs(configFiles) do
	if not fs.exists(file) then
		shell.run('systemFiles/Install/setup')
		print('Due To HUGE Servicing The Security Suite Is Currently Offline, \n\nPlease Re-Install When Release 2.0.0 Has Been Release, \n\nCheck the computercraft forum page for details')
	end
end

local file = fs.open('systemFiles/Security/adminPass', 'r')
local adminPassword = file.readLine()
file.close()

function RecieveStartupKey()
	while true do
	  local event, arg = os.pullEvent()
	  if event == 'BootDone' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or key == keys.rightAlt then
		bootKey = true
		checkStartKey()
	  	return arg 
		end
	  end
	  
	end
end

function checkStartKey()
  term.setBackgroundColor(128)
  term.setTextColor(256)
  if bootKey then
    Boottext = "Entering Setup"
  else
    Boottext = "[alt] Setup"
  end
    term.setCursorPos(termX-(#Boottext+1), 1)
    write(Boottext)
  term.setBackgroundColor(256)
  term.setTextColor(1)
end

function initBackground(color) --Use To Quickly assemble GUI
  term.setBackgroundColor(color)
  term.clear()  
  drawTitleBar()
end
bootX = termX/2-7
bootY = termY/2-4
-- Loads All Boot Images
LogFile.i('Loading Boot Images', runningProgram)
BL0 = paintutils.loadImage("systemFiles/BootLogos/boot0.nfp")
BL1 = paintutils.loadImage("systemFiles/BootLogos/boot1.nfp")
BL2 = paintutils.loadImage("systemFiles/BootLogos/boot2.nfp")
BL3 = paintutils.loadImage("systemFiles/BootLogos/boot3.nfp")
BL4 = paintutils.loadImage("systemFiles/BootLogos/boot4.nfp")
BL5 = paintutils.loadImage("systemFiles/BootLogos/boot5.nfp")
BL6 = paintutils.loadImage("systemFiles/BootLogos/boot6.nfp")
BL7 = paintutils.loadImage("systemFiles/BootLogos/boot7.nfp")
BL8 = paintutils.loadImage("systemFiles/BootLogos/boot8.nfp")
BLFinal = paintutils.loadImage('systemFiles/bootFail.nfp')

function bootLogo (state, x, y, bgcolor)
  if state == 0 then
    paintutils.drawImage(BL0, x, y)
  elseif state == 1 then
    paintutils.drawImage(BL1, x, y)
  elseif state == 2 then
    paintutils.drawImage(BL2, x, y)
  elseif state == 3 then
    paintutils.drawImage(BL3, x, y)
  elseif state == 4 then
    paintutils.drawImage(BL4, x, y)
  elseif state == 5 then
    paintutils.drawImage(BL5, x, y)
  elseif state == 6 then
    paintutils.drawImage(BL6, x, y)
  elseif state == 7 then
    paintutils.drawImage(BL7, x, y)
  elseif state == 8 then
    paintutils.drawImage(BL8, x, y)
  elseif state == 9 then
    paintutils.drawImage(BLFinal, x, y)
  end
  term.setBackgroundColor(bgcolor)
end

function PrintCentered(text, y)
	local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
	term.clearLine()
    write(text)
end

function loadAPIs()  --Auto Loads ALL APIs It Can As Long As They Are In /api
  drawTitleBar()
  local currentImage = -1
	local total = #fs.list("/api")
	term.setBackgroundColor(256)
	PrintCentered("Loading APIs", 17)
	for _, fileApi in pairs(fs.list('/api')) do
		if string.sub(fileApi,1,1) ~= "." then
			if math.floor(_*(8/total)) ~= currentImage then
				currentImage = math.floor(_*(8/total))
				local image = paintutils.loadImage('systemFiles/BootLogos/boot'..currentImage..'.nfp')
				paintutils.drawImage(image, bootX, bootY)
			end		
			LogFile.i('Loading: '..fileApi, runningProgram)
			if os.loadAPI('/api/'..fileApi) then
			sleep(0)
			term.setBackgroundColor(256)
			term.setTextColor(colors.white)
            term.setCursorPos(1,19)
			term.clearLine()
			term.setCursorPos(1,18)
			term.clearLine()
			PrintCentered(fileApi.." Loaded!", 18)
			LogFile.i(fileApi..' Api Loaded', runningProgram)
		    else
			  LogFile.e('Failed To Load API: '..fileApi, runningProgram)
			  error ("Error Occurred Whilst Loading API: "..fileApi)
			end
		end
	end
	sleep(0.1)
	term.clear()
	initBackground(256)
	drawTitleBar()
	return true
end

function drawTitleBar()
  term.setBackgroundColor(128)
  term.setCursorPos(1,1)
  term.clearLine()
  term.setTextColor(colors.cyan)
  write "HbombOS Security Suite"
  term.setCursorPos(1,2)
  term.clearLine()
  term.setTextColor(256)
  write "Startup"
  checkStartKey()
end

function editFile(filePath, editType, editContent)
	if filePath and editType and editContent then
		local f = fs.open(filePath, editType)
		f.write(editContent)
		f.close()
	else
		LogFile.e('Attempted To Edit File Without All Args', runningProgram)
	end
end

function programMenu()
    LogFile.i('Program Selection Menu Open', runningProgram)
    drawTitleBar()
    term.setTextColor(1)
    term.setBackgroundColor(256)
    term.clear()
	PrintCentered("HbombOS Security Suite", 2)
	PrintCentered("Programs", 3)
	PrintCentered("The Suite Offers Several Programs For You To Use", 5)
	PrintCentered("Select One You Would Like To Use", 6)
	PrintCentered("You Can Change It At Any Time Using The BootMenu", 7)
	PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
	local continue = false
	local options = {
		{'PIN', function()
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/pin')
		  os.reboot()
		end},
		{'Digital Lock', function() 
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/dualKey')
		  os.reboot()
		end}, 
		{'Reactor Control', function() 
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/reactor')
		  os.reboot()
		end},
		{'Keycard Lock', function()
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/keycard')
		  os.reboot()
		end},
		{'PDA Range Lock', function()
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/rangeLock')
		  os.reboot()
		end},
		{'Dual KeyCard Lock', function()
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/keycardDual')
		  os.reboot()
		end},	
		{'OpenP Detector Lock', function()
		  editFile('systemFiles/Programs/configuration', 'w', 'systemFiles/Programs/OpenPDetect')
		  os.reboot()
		end}
	}

	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 6)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
		  options[selected][2]()
		  wait = false
		end
		draw()
	end
	return continue
end

function programCheckConfig()
LogFile.i('Checking Program Config', runningProgram)
  if not fs.exists('systemFiles/Programs/configuration') then programMenu() else
    local f = fs.open('systemFiles/Programs/configuration', "r")
	programStart = f.readLine()
	f.close()
	if not programStart then programMenu() else
	  if programStart == "" then programMenu() else 
	    local f = fs.open('systemFiles/Programs/configuration', 'r')
		fileStartup = f.readLine()
		f.close()
	  end
	end
  end
end

function main() --The main function, calls all child functions
  --First all APIs must be loaded to perform the system checks later on
  LogFile.i('Main Initialise Function Started', runningProgram)
  i = 0
  loadAPIs()
  programCheckConfig()
  term.setBackgroundColor(256)
  term.setTextColor(1)
  checkForUpdates()
  return true
end

function updatePursue()
	--First redownload the updater...
	if not download.git("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/systemFiles/Install/updater", "systemFiles/Install/updater") then printer.centered('Error Occured While Downloading Updater!', 19) sleep(1) return 'Cancel' end
	local h = fs.open('systemFiles/Install/updateConfig', 'r')
	updateSetting = h.readLine()
	h.close()
	if updateSetting == "true" then shell.run("systemFiles/Install/updater", "quiet") elseif updateSetting == "false" then shell.run("systemFiles/Install/updater") else errora.err('Crash Bang BOOM', "The Updater Launch Script Failed To Launch the Updater, Returned: "..tostring(updateSetting), true, true) end
	if request_code == "Cancelled" then return 'Cancel'
	elseif request_code == "Error" then
		updateError()
	else errora.err('Crash Bang BOOM', 'Updater Returned Unknown Code: '..tostring(request_code), true, true) end
end

function updateError()
	term.clear()
	drawTitleBar()
	printer.centered('The Updater Is Having Some Problems Connecting', 6)
	printer.centered('Ensure You Are Connected To The Internet', 8)
	printer.centered('Well Try Again Next Reboot', 10)
	sleep(3)
	return
end

function checkForUpdates()
	LogFile.i('Checking For Updates', runningProgram)
	while true do
		term.setBackgroundColor(256)
		term.clear()
		drawTitleBar()
		printer.centered('Checking For Software Updates', 6)
		printer.centered('Please Wait...', 19)
		updateState = update.Check()
		if updateState == true then
			--There is an update available
			if updatePursue() == 'Cancel' then Cupdate = true break end
		elseif updateState == false then
			--There is not an update available
			break
		elseif updateState == "ERROR" then
			--Error!
			updateError()
			break
		else
			os.reboot()
		end
	end
	if Cupdate then return 'Cancel' else return true end
end

elements={}

function btnInit(btnText, btnWidth, btnHeight, btnX, btnY, btnTC, btnBG, oTC, oBG, onClick, toggle, secBG, secTC, secText) --Function to create button
	local btn = element.create(btnText, btnWidth, btnHeight, btnX, btnY, btnTC, btnBG, oTC, oBG, onClick, toggle, secBG, secTC, secText) --Calls API to generate button
	table.insert(elements, btn) --Inserts into table so it can be scanned later
	element.opacity(btn, true) --Sets visibility to true
	return btn
end

function doClick(event, btn, x, y)
	functionToRun = element.tryClick(elements, x, y)
	if functionToRun then --Check click location
		functionToRun()
	end
end

function readButton(len, replaceChar)
  submitted = false
  term.setTextColor(1)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        event, p1, p2, p3 = os.pullEvent()
        if event=="char" then
          if #input < len then
			input = input .. p1
			term.write(replaceChar or p1)
          end
        elseif event=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        elseif event == "submit_Result" then --Button Event
			submitted = true
			return input
		elseif event == "mouse_click" then
			doClick('mouse_click', nil, p2, p3)
		end
  until submitted
end

function changeAdminPassword()
	cancel = btnInit('Cancel', nil, nil, 2,termY - 1 , 1, colors.red, 1, 256, onClick, false, nil, nil, nil)
	continue = btnInit('Next', nil, nil, termX, termY-1, 1, colors.green, 1, 256, onClick, false, nil, nil, nil)
	continue.x = termX-(continue.width+2)
	element.draw(continue)
	local function setupTitle()
		titleBar.draw("HbombOS Security Suite", "Password Management", colors.cyan, 256, 128, 256, 1)
	end
	
	local function reDraw()
		element.opacity(cancel, true)
		element.opacity(continue, true)
	end
	
	function oldPassword()
		cancel.func = function() bootMenuOptions(true) end
		continue.func = function() os.queueEvent('submit_Result') end
		while true do
			term.setCursorBlink(true)
			term.clear()
			setupTitle()
			reDraw()
			printer.centered('Before you can set your new password', 6)
			printer.centered('you must enter your current admin password', 7)
			term.setCursorPos(termX/2-#'Current Password: ', 10)
			write('Current Password: ')
			local input = readButton()
			term.setCursorBlink(false)
			if input == adminPassword then newPassword() break else printer.centered('Incorrect Admin Password', 19) sleep(0.5) end
		end
	end
	
	function newPassword()
		cancel.func = function() bootMenuOptions(true) end
		cancel.text = "Cancel"
		continue.func = function() os.queueEvent('submit_Result') end
		while true do
			term.setCursorBlink(true)
			term.clear()
			setupTitle()
			reDraw()
			printer.centered('Great! Now enter your new password', 6)
			printer.centered('below, then click "Next"', 7)
			term.setCursorPos(termX/2-#'New Password: ', 10)
			write('New Password: ')
			local input = readButton()
			term.setCursorBlink(false)
			if input ~= "" then local NewPassword = input verify(NewPassword) break end
		end
	end

	function verify(passwordToVerify)
		cancel.func = function() newPassword() end
		cancel.text = "Back"
		continue.func = function() os.queueEvent('submit_Result') end
		while true do
			term.setCursorBlink(true)
			term.clear()
			setupTitle()
			reDraw()
			printer.centered('Last Step Now! Simply Re-enter your new password', 6)
			printer.centered('and then click "Finish"', 7)
			term.setCursorPos(termX/2-#'Repeat Password: ', 10)
			write('Repeat Password: ')
			local input = readButton()
			term.setCursorBlink(false)
			if input == passwordToVerify then editFile('systemFiles/Security/adminPass', 'w', passwordToVerify) complete() break else printer.centered('Passwords Don\'t Not Match', 19) sleep(0.5) newPassword() end
		end
	end
	
    function complete()		
			term.setCursorBlink(false)
			continue.text = "Reboot"
			element.draw(continue)
			term.clear()
			setupTitle()
			reDraw()
			element.opacity(cancel, false)
			continue.func = function() os.reboot() end
			printer.centered('All Done!', 6)
			printer.centered('Your Password Has Been Changed', 7)
			printer.centered('Click "Reboot"', 8)
		while true do
			local event, button, x, y = os.pullEvent('mouse_click')
				doClick(event, button, x, y)
		end
	end
	oldPassword()
end


function bootMenu()
LogFile.i('Boot Menu Entered', runningProgram)
while true do
  term.clear()
  titleBar.draw("HbombOS Security Suite", "BIOS Login", colors.cyan, 256, 128, 256, 1)
  function adminPasswordE()
    PrintCentered("HbombOS Security Suite", 4)
    PrintCentered("Boot Options", 5)
    PrintCentered("Type In Admin Password To Continue", 18)
    PrintCentered("Or Reboot (CTRL+R) To Cancel", 19)
    adminPassText = "Password: "
    term.setCursorPos(termX/2-#adminPassText, 7)
    write (adminPassText)
    local input = read("*")
      if input == adminPassword then 
  	    return true
	  end
  end
  if adminPasswordE() then 
    return true
  else
    LogFile.w('Incorrect Admin Password In BootMenu', runningProgram)
    printer.centered("Incorrect!", 8)
	sleep(0.5)
  end
end

end


local suiteFilesConfig = {
	"systemFiles/Security/adminPass",
	"systemFiles/Programs/pinConfig",
	"systemFiles/Programs/reactorConfig",
	"systemFiles/Programs/keycardConfig",
	"systemFiles/Programs/dualKeyConfig",
	"systemFiles/Programs/KeyDualConfig",
	"systemFiles/Programs/rangeLockSettings",
	"systemFiles/Programs/detectorConfig",
	"systemFiles/Install/updateConfig",
	"systemFiles/Programs/configuration",
	"systemFiles/debugConfig"
}

function bootMenuOptions(skip)
	term.setCursorBlink(false)
    LogFile.i('Boot Menu Option Opened', runningProgram)
		if not skip then
			if not bootMenu() then bootMenu() end
		end
    term.setTextColor(1)
    term.setBackgroundColor(256)
    term.clear()
    titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
	PrintCentered("HbombOS Security Suite", 4)
	PrintCentered("Boot Options", 5)
	PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
	local continue = false
	local options = {
	    {'Reset Settings', function() 
		LogFile.w('Removing System Settings', runningProgram)
		term.clear()
		PrintCentered("Removing System Settings", 6)
		sleep(0)
			for _, file in ipairs(suiteFilesConfig) do
				sleep(0.2)
				if fs.exists(file) then printer.centered(file, 19) fs.delete(file) end
			end
		printer.centered('System Settings Removed!', 6)
		printer.centered('Rebooting...', 19)
		sleep(1)
		os.reboot()
		end},
		{'Uninstall Security Suite', function()
		    LogFile.i('Wiping Computer', runningProgram)
			term.setCursorPos(1,1)
			term.setBackgroundColor(256)
			term.setTextColor(colours.white)
			term.clear()
			titleBar.draw("HbombOS BIOS", "Uninstaller", colors.cyan, 256, 128, 256, 1)
			printer.centered("Please Wait While We Uninstall Security Suite 2014", 6)
			local function rmFold(path)
				if path == '/rom' or path == "/openp" then
					return
				end
				for i, v in ipairs(fs.list(path)) do
					term.setBackgroundColor(256)
					term.setTextColor(1)
					if fs.isDir(path..'/'..v) then
						rmFold(path..'/'..v)
						printer.centered('Removed Folder: ', 18)
						printer.centered(path..'/'..v, 19)
						sleep(0.2)
					else
						if fs.delete(path..'/'..v) then
						  printer.centered('Removed File: ', 18)
						  printer.centered(path..'/'..v, 19)
						  LogFile.i('Removed File: '..path, runningProgram)
						  sleep(0.2)
						end
					end
				end
				if path ~= '' then
					fs.delete(path)
				end
			end				 
			rmFold('')
			--Finished Computer Wipe
		end},
		{'Use Shell/CraftOS', function() term.setBackgroundColor(colors.black) term.clear() term.setCursorPos(1,1) LogFile.i('Shell Opened', runningProgram) shell.run ("shell") end},
		{'Change Admin Password', function()  
		 term.clear()
		 titleBar.draw("HbombOS Security Suite", "Password Management", colors.cyan, 256, 128, 256, 1)
		 changeAdminPassword()
		end},
		{'Force Update', function() 
		  LogFile.i('Force Updating Client', runningProgram)
		  term.clear()
		  titleBar.draw("HbombOS Security Suite", "Force Updating", colors.cyan, 256, 128, 256, 1)
	   	  printer.centered("Downloading New Update Firmware", 19) 
		  printer.centered("Force Updating Client", 6) 
          sleep(1)
		  download.git("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/systemFiles/Install/updater", "systemFiles/Install/updater") 
		  printer.centered("Running Updater", 19) 
		  sleep(0)
		  shell.run("systemFiles/Install/updater") 
		  sleep(4)
		  continue = true
		end},
		{'Change Startup File', function() programMenu() end},
		{'Re-Configure Suite', function() shell.run'systemFiles/Install/setup' end},
		{'Edit Mode', function() 
			term.setTextColor(1)
			term.setBackgroundColor(256)
			term.clear()
			titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
			PrintCentered("HbombOS Security Suite", 4)
			PrintCentered("Debug Mode", 5)
			PrintCentered('If you intend to edit my code', 8)
			PrintCentered('then please ENABLE this option to prevent', 9)
			PrintCentered('auto log reporting...', 10)
			PrintCentered("Click A Button Above", 19)
			Enable = btnInit('Enable', nil, nil, 2, termY-1, 1, colors.green, 1, 256, function(event) debugModeChange = true end, false, nil, nil, nil)
			Disable = btnInit('Disable', nil, nil, termX-10, termY-1, 1, colors.red, 1, 256, function(event) debugModeChange = false end, false, nil, nil, nil)
			term.setTextColor(1)
			term.setBackgroundColor(256)
			while true do --Main loop waiting for mouse click
				event, button, arg1, arg2 = os.pullEvent()
					if event == "mouse_click" then
					functionToRun = element.tryClick(elements, arg1, arg2)
						if functionToRun then --Check click location
							functionToRun()
							break
						end
					end
			end
			local h = fs.open('systemFiles/debugConfig', 'w')
			h.writeLine(tostring(debugModeChange))
			h.close()
			printer.centered('Choice Confirmed... Returning', 19)
			sleep(1)
			return
		end},
		{'Continue Boot', function() LogFile.i('Left Boot Menu', runningProgram) continue = true end}
	}

	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 4)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = #options
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = 1
			end
		elseif key == keys.enter then
			if options[selected][1] == 'Uninstall Security Suite' then
			  term.setTextColor(1)
              term.setBackgroundColor(256)
              term.clear()
			  titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
	          PrintCentered("HbombOS Security Suite", 4)
	          PrintCentered("Boot Options", 5)
	          PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
	          PrintCentered("Are You Sure, ALL Files Will Be Removed", 10)
	          PrintCentered("Including Files Not From Security Suite", 11)
	          PrintCentered("Y To Continue, N To Cancel", 15)
			  PrintCentered("", 19)
				local _ = true
				while _ do
					local ev, key = os.pullEvent('char')
					if key == 'y' then
					    sleep(0)
						term.clear()
						term.setTextColor(1)
						term.setBackgroundColor(256)
					    titleBar.draw("HbombOS Security Suite", "Uninstall", colors.cyan, 256, 128, 256, 1)
						PrintCentered("Removing HbombOS Security Suite", 6)
						options[selected][2]()
						term.clear()
					    titleBar.draw("HbombOS Security Suite", "Uninstall", colors.cyan, 256, 128, 256, 1)
						printer.centered("Thanks For Using Security Suite", 6)
						printer.centered("If Bugs Made You Uninstall, Please Report Them!", 8)
						printer.centered("Click Anywhere On-screen To Reboot", 19)
					    os.pullEvent("mouse_click")
						os.reboot()
					elseif key == 'n' then
						_ = false
						term.clear()
						titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
				        PrintCentered("HbombOS Security Suite", 4)
	                    PrintCentered("Boot Options", 5)
	                    PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
						--bootMenuOptions(true)
					end
				end
				term.setTextColor(colors.red)
				term.setBackgroundColor(colors.white)
				PrintCentered('                          ', 0)
				term.setTextColor(1)
				term.setBackgroundColor(256)
			elseif options[selected][1] == "Edit Mode" then
				options[selected][2]()
				_ = false
				term.clear()
				titleBar.draw("HbombOS Security Suite", "Settings", colors.cyan, 256, 128, 256, 1)
				PrintCentered("HbombOS Security Suite", 4)
				PrintCentered("Boot Options", 5)
				PrintCentered("Use Your Arrow Keys To Select, Enter To Confirm", 19)
			else
				options[selected][2]()
				wait = false
			end
		end
		draw()
	end
	term.setTextColor(colors.white)
	printer.centered("Continuing Boot...", 19)
	sleep(0.1)
	printer.centered("Returning continue Variable", 19)
	return continue
end

function Start()
  checkStartKey()
  local key = nil
  local success = false
  parallel.waitForAll(function()success = main() os.queueEvent('BootDone') end, function() key = RecieveStartupKey() end)
	if success and key == keys.leftAlt or key == keys.rightAlt then
      success = bootMenuOptions()
	end
	  return success
  end
   
function readFiles()
  LogFile.i('Reading System Config', runningProgram)
  printer.centered("Reading Configuration Files", 19)
  local f = fs.open('systemFiles/Programs/configuration', 'r') --Opens Config
  fileStartup = f.readLine()
  f.close()
  	if fileStartup then --Checks If The User Has A File Chosen
	  printer.centered("Running: "..fileStartup, 19)
	  LogFile.i('Running User File: '..fileStartup, runningProgram)
	  --shell.run('systemFiles/install/setup')
	  shell.run(fileStartup) --Runs User Specified Program
	  print("Program Has Ended! Rebooting")
	  sleep(1)
	  LogFile.e('Program: '..fileStartup..' Crashed', runningProgram)
	  os.reboot()
	end
  printer.centered("No Default File Stored", 19)
  sleep(1)
  os.reboot() --Reboots So User Can Pick There Program
end

function initialise() --Function Used To Trace Error Catching
  term.setBackgroundColor(256)
  term.clear()
  drawTitleBar()
  if Start() then 
    readFiles() 
  else 
    errora.err("Uh Oh! Booting Failed", "The start-up process failed when waiting", true, false) 
  end
end

local _, err = pcall(initialise) --Error Catching, All Functions Are Called From initialise() at some point...
  if err then
    LogFile.e('XPCALL Error Caught: '..err, runningProgram)
    term.setCursorBlink(false)
	errora.err(err, 'Startup Has Crashed! Please Report Above Error', true, false) --BSoD for protection, the 'true' is an auto-reboot option to prevent the door waiting for a prompt
  end