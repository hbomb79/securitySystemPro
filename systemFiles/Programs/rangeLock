--os.pullEvent = os.pullEventRaw Termination Defence Layer 1!
runningProgram = shell.getRunningProgram()
if not pocket then LogFile.i('rangeLock Program Loaded', runningProgram) end
isRunning = true
termX, termY = term.getSize()
i = 0
rsText = 'Side: '
rsTimeText = 'Time: '
config = false

elements = {}
function btnInit(btnText, btnWidth, btnHeight, btnX, btnY, btnTC, btnBG, oTC, oBG, onClick, toggle, secBG, secTC, secText) --Function to create button
	local btn = element.create(btnText, btnWidth, btnHeight, btnX, btnY, btnTC, btnBG, oTC, oBG, onClick, toggle, secBG, secTC, secText) --Calls API to generate button
	table.insert(elements, btn) --Inserts into table so it can be scanned later
	element.opacity(btn, true) --Sets visibility to true
	return btn
end

function doClick(event, btn, x, y)
	functionToRun = element.tryClick(elements, x, y)
	if functionToRun then --Check click location
		functionToRun()
	end
end

function checkClick(event, btn, x, y)
	if not isSettingUp then
		doClick(event, btn, x, y)
	end
end

current = {
  Settings = {
    Whitelist = {}
  },
}
current.status = 'Booting System'
security = {}


Peripheral = {
	GetPeripheral = function(_type)
		for i, p in ipairs(Peripheral.GetPeripherals()) do
			if p.Type == _type then
				return p
			end
		end
	end,

	Call = function(type, ...)
		local tArgs = {...}
		local p = GetPeripheral(type)
		peripheral.call(p.Side, unpack(tArgs))
	end,

	GetPeripherals = function(filterType)
		local peripherals = {}
		for i, side in ipairs(peripheral.getNames()) do
			local name = peripheral.getType(side):gsub("^%l", string.upper)
			local code = string.upper(side:sub(1,1))
			if side:find('_') then
				code = side:sub(side:find('_')+1)
			end

			local dupe = false
			for i, v in ipairs(peripherals) do
				if v[1] == name .. ' ' .. code then
					dupe = true
				end
			end

			if not dupe then
				local _type = peripheral.getType(side)
				local isWireless = false
				if _type == 'modem' then
					if not pcall(function()isWireless = peripheral.call(sSide, 'isWireless') end) then
						isWireless = true
					end     
					if isWireless then
						_type = 'wireless_modem'
						name = 'W '..name
					end
				end
				if not filterType or _type == filterType then
					table.insert(peripherals, {Name = name:sub(1,8) .. ' '..code, Fullname = name .. ' ('..Capitalise(side)..')', Side = side, Type = _type, Wireless = isWireless})
				end
			end
		end
		return peripherals
	end,

	GetPeripheral = function(_type)
		for i, p in ipairs(Peripheral.GetPeripherals()) do
			if p.Type == _type then
				return p
			end
		end
	end,

	PresentNamed = function(name)
		return peripheral.isPresent(name)
	end,

	CallType = function(type, ...)
		local tArgs = {...}
		local p = Peripheral.GetPeripheral(type)
		return peripheral.call(p.Side, unpack(tArgs))
	end,

	CallNamed = function(name, ...)
		local tArgs = {...}
		return peripheral.call(name, unpack(tArgs))
	end
}

Capitalise = function(str)
	return str:sub(1, 1):upper() .. str:sub(2, -1)
end

function downloadFail(errCode)
  term.clear()
  term.setTextColor(colors.black)
  term.setBackgroundColor(1)
  term.setCursorPos(1,1)
  print('An error occured while downloading APIs to the pocket PC')
  print()
  print(errCode)
  print()
  print('Rebooting!')
  sleep(3)
  os.reboot()
end


function downloadFiles(getUrl, toPath) --Used to download stuff!!
  for i = 1, 3 do
    local response = http.get(getUrl)
	if response then
	  data = response.readAll()
	      if fs.exists(toPath) then
		  fs.delete(toPath)
		end
		if toPath then
		  local file = io.open(toPath, "w")
		  file:write(data)
		  file:close()
		  return true
		else
		  downloadFail('An Error Occurred While Saving To Path: '..toPath)
		end
	else
	  downloadFail('The Url: '..getUrl..' Does Not Appear To Exist! Please Try Again')
	end
  end
  downloadFail('The Request Timed Out')
end

pocketAPIS = {
	"/api/LogFile",
	"/api/download",
	"/api/systemCheck",
	"/api/update",
	"/api/printer",
	"/api/titleBar",
	"/api/errora",
	"/api/element"
}

function Check()
for i=1, 3 do
	url = "https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/versionPocket"
 if url == nil then errora.err('Updater URL', 'The Update Source URL Is Empty! Please Report If Not Your Fault') end
  local response = http.get(url)
  if response then
    updateData = response.readLine()
	local f = fs.open("version", "r")
	currentVersion = f.readLine()
	f.close()
	  if updateData ~= currentVersion then
	    return true
	  else
	    return false
	  end
  else
	error "The Update URL Cannot Be Resolved Or Is Missing [404]"  
  end
end
error "The URL Cannot Be Reached! [208]"
end

function updatePocket()
	if not fs.exists('version') then print("download version file.. First Time Use Presumed") downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/versionPocket", "version") os.reboot() end
	if Check() then
		term.clear()
		term.setCursorPos(1,1)
		term.setTextColor(colors.red)
		print('There is an update for the pocket PC network... Please update your PDA by re-registering it in any range lock computer... \n\nNOTE: The Computer You Use Needs To Be Updated Too!') print('\n\nClick Anywhere To Shutdown, DO THIS BEFORE UPDATING') os.pullEvent('mouse_click') os.shutdown()
	else
		print('Latest Version: '..updateData)
		print('Running Version: '..currentVersion)
	end
end

function pocketAPI() --Downloads And Installs The APIs Required To Run The Program
  for _, entry in ipairs(pocketAPIS) do
	if not fs.exists(entry) then missingFile = true end
  end
  if missingFile then
    term.setTextColor(1)
	term.setBackgroundColor(256)
	term.clear()
	term.setCursorPos(1,1)
	print('Please Wait While We Download All The APIs Needed To Use The Program!')
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/download", "/api/download")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/systemCheck", "/api/systemCheck")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/update", "/api/update")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/printer", "/api/printer")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/titleBar", "/api/titleBar")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/errora", "/api/errora")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/LogFile", "/api/LogFile")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/api/element", "/api/element")
    downloadFiles("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/versionPocket", "version")
  end
  return true
end

function checkPocketApis()
	for _, api in ipairs(pocketAPIS) do
		if not fs.exists(api) then return false end
	end
	return true
end

function loadPApis()
	for _, entry in ipairs(pocketAPIS) do
		sleep(0)
		print('Loading: '..entry)
		if not os.loadAPI(entry) then
			print('Cannot Load: '..entry)
			error('Cannot Load API: '..entry)
			sleep(4)
			os.shutdown()
		else
			print('Loaded: '..entry)
		end
	end
	print('All Listed APIs Loaded')
	return true
end

if pocket then
term.setBackgroundColor(256)
term.clear()
term.setCursorPos(1, 1)
term.setTextColor(1)
print('Performing Pocket System Checks')
	while true do
		print'Checking For Updates'
		updatePocket()
		if not checkPocketApis() then
			if not ApiError then pocketAPI() else error'Cannot Download And Install APIs At This Time, Please Report If Continues' end
			ApiError = true
		else 
			if loadPApis() then LogFile.Initialise() LogFile.i('ALERT, This System Is Running On A POCKET Computer... RangeLock Transponder', runningProgram) break end
		end
	end
end

function hostSetup() --Creates The Setup GUI If The Config File Is Not Found
  isSettingUp = true 
  LogFile.i('Host Setup Started', runningProgram)
  local function setupTitleBar()
	titleBar.draw('HbombOS Secuity Suite', 'Range Detector Setup', colors.cyan, 256, 128, 256, 1)
  end
  local function welcome()
    setupTitleBar()
	start = btnInit('Start', nil, nil, termX-#'Start'-2, termY-1, 1, colors.cyan, 1, 256, function() os.queueEvent('start') end, false, nil, nil, nil)
    printer.centered('It appears you have not yet used this', 6)
    printer.centered('program before', 7)
    printer.centered('Click Start To Get Going!', 10)
	while true do
		local event, p1, p2, p3 = os.pullEvent()
		if event == 'mouse_click' then doClick(event, p1, p2, p3) elseif event=="start" then element.opacity(start, false) break end
	end
  end
  
  local function redstoneOutSide()
	for _, elem in ipairs(elements) do
		elem.toggleState = 1
		element.opacity(elem, false)
	end
    setupTitleBar()
	right = btnInit('Right', nil, nil, 5, 10, 1, colors.cyan, 1, 256, function() current.Settings.redstoneOutsideSetup = 'right' end, true, colors.green, 1, 'Right', 'rsOut')
	right.toggleState = 2
	element.opacity(right, true)
	current.Settings.redstoneOutsideSetup = 'right'
	left = btnInit('Left', nil, nil, right.x+right.width+2, 10, 1, colors.cyan, 1, 256, function() current.Settings.redstoneOutsideSetup = 'left' end, true, colors.green, 1, 'Left', 'rsOut')
	top = btnInit('Top', nil, nil, left.x+left.width+2, 10, 1, colors.cyan, 1, 256, function() current.Settings.redstoneOutsideSetup = 'top' end, true, colors.green, 1, 'Top', 'rsOut')
	bottom = btnInit('Bottom', nil, nil, top.x+top.width+2, 10, 1, colors.cyan, 1, 256, function() current.Settings.redstoneOutsideSetup = 'bottom' end, true, colors.green, 1, 'Bottom', 'rsOut')
	back = btnInit('Back', nil, nil, bottom.x+bottom.width+2, 10, 1, colors.cyan, 1, 256, function() current.Settings.redstoneOutsideSetup = 'back' end, true, colors.green, 1, 'Back', 'rsOut')
	continue = btnInit('Next', nil, nil, termX-2-#'Next', termY-1, 1, colors.cyan, 1, 256, function() os.queueEvent('Continue') end, false, nil, nil, nil, nil)
	while true do
		printer.centered("Redstone Output Side", 6)
		printer.centered("Click A Button To Decide Your", termY-1)
		printer.centered("Redstone Output Side", termY)
		element.opacity(continue, true)
		local event, btn, x, y = os.pullEvent()
		if event == "mouse_click" then
			doClick(event, btn, x, y)
		elseif event == "Continue" then
			break
		end
	end
	
	for _, elem in ipairs(elements) do
		if elem.parent == "rsOut" then
			element.opacity(elem, false)
		end
	end
	element.opacity(continue ,false)
  end
  
  local function firstRegistartion()
  while true do
	term.clear()
    setupTitleBar()
	continue.func = function() os.queueEvent('exit') end
	continue.y = termY - 1
	element.opacity(continue, true)
    printer.centered('Please Insert Your PDA Into A Disk Drive', 6)
    printer.centered('Attached To This Computer To Sync Them', 7)
    printer.centered('You Can Do This Again Through Your Settings', 8)
    printer.centered('Press "Next" To Continue To Next Step', 19)
    local event, side, arg2, arg3 = os.pullEvent()
    if event == 'disk' then
	  if disk.hasData(side) then
		local path = disk.getMountPath(side)
		local fingerprint = nil
		if fs.exists(path..'/.fingerprint') then
			local h = fs.open(path..'/.fingerprint', 'r')
			if h then
				local str = h.readAll()
				if #str == 256 then
					fingerprint = str
				end
			end
			h.close()
		else
		end
		if not fingerprint then
			fingerprint = generateFingerprint()
			local h = fs.open(path..'/.fingerprint', 'w')
			h.write(fingerprint)
			h.close()
			addStartup = true
			if addStartup then
				local h = fs.open('systemFiles/Programs/rangeLock', 'r')
				local startup = h.readAll()
				h.close()
				local h = fs.open(path..'/startup', 'w')
				h.write(startup)
				h.close()
			end
		end
		if not FingerprintIsOnWhitelist(fingerprint) then
			table.insert(current.Settings.Whitelist, fingerprint)
		end  
		  disk.eject(side)
          printer.centered('PDA Registered', 19)
          sleep(1)
	end
  elseif event == 'mouse_click' then
	doClick(event, side, arg2, arg3)
  elseif event == "exit" then
	
	return
  end
end
  return
end
  
  local function distance()
	  while true do
		  term.clear()
		  setupTitleBar() 
		  continue.func = function() os.queueEvent('submit_Result') end
		  element.opacity(continue, true)
		  printer.centered('At What Proximity To The Computer Do', 6)
		  printer.centered('You Want To Be When It Emits A Redstone Signal', 7)
		  distanceText = 'Distance(In Blocks): '
		  term.setCursorPos(termX/2-#distanceText, 10)
		  write (distanceText)
		  local distanceInput = uInput.eventN(2, nil, elements)
		   if distanceInput ~= 'Word' then
			   if distanceInput ~= "" then
				  distanceInput = tonumber(distanceInput)
					if distanceInput <= 64 then current.Settings.distance = distanceInput break end
			   end
		   else
				printer.centered('Only Number May Be Entered Here',19)
				sleep(0.5)
		   end
	  end
  end
  
  local function saveSetup()
    LogFile.i('Host Setup Complete', runningProgram)
    setupTitleBar()
    printer.centered('Thank You For Setting Up Your RangeLock', 6)
	printer.centered('Secuity System! Please Report Any Bugs', 8)
    printer.centered('Saving Settings', 19)
	sleep(0)
    SaveSettings()
	finish = btnInit('Reboot', nil, nil, termX-2-#'Reboot', termY-1, 1, colors.cyan, 1, 256, function() os.reboot() end, false, nil, nil, nil, nil)
	element.opacity(continue, false)
	element.opacity(finish, true)
	printer.centered('Click Reboot To Finish', 19)
		while true do
			local event, btn, x, y = os.pullEvent('mouse_click')
			doClick(event, btn, x, y)
		end
  end
--Call all the functions in order to setup the system!
welcome()
redstoneOutSide()
distance()
firstRegistartion()
saveSetup()
end

-- Modem Functions Called For Info On Modems, Or To Change Modem Status
modem = {
  channels = {
    ping = 6019,
    request = 6021,
	reply = 6023,
  },
  isOpen = function(channel) --Returns if the channel is open or not
    Peripheral.CallType('wireless_modem', 'isOpen', channel)
  end,
  
  Open = function(channel) --Open a channel if not already open
    if not modem.isOpen(channel) then
	  Peripheral.CallType('wireless_modem', 'open', channel)
	end
  end, 
  
  Close = function(channel) --Close channel specified
    Peripheral.CallType('wireless_modem', 'close', channel)
  end,
  
  CloseAll = function() --Close all channels
    Peripheral.CallType('wireless_modem', 'closeAll')
  end, 
  
  Transmit = function(channel, replyChannel, message) --Transmit a message over the modem... The message is serialized first so it can hold data.... Use FormatMessage()
    Peripheral.CallType('wireless_modem', 'transmit', channel, replyChannel, textutils.serialize(message))
  end,
  	
  isPresent = function()
    if Peripheral.GetPeripheral('wireless_modem') == nil then
	  return false
	else
	  return true
	end
  end,

  RecieveMessage = function(_channel, messageID, timeout)
		open(_channel)
		local done = false
		local event, side, channel, replyChannel, message = nil
		Timeout(function()
			while not done do
				event, side, channel, replyChannel, message = os.pullEvent('modem_message')
				if channel ~= _channel then
					event, side, channel, replyChannel, message = nil
				else
					message = textutils.unserialize(message)
					message.content = textutils.unserialize(message.content)
					if messageID and messageID ~= message.messageID or (message.destinationID ~= nil and message.destinationID ~= os.getComputerID()) then
						event, side, channel, replyChannel, message = nil
					else
						done = true
					end
				end
			end
		end,
		timeout)
		return event, side, channel, replyChannel, message
	end,

  SendMessage = function(channel, message, reply, messageID, destinationID)
    reply = reply or modem.channels.reply
	modem.Open(channel)
	modem.Open(reply)
	local _message = modem.FormatMessage(message, messageID, destinationID)
	modem.Transmit(channel, reply, _message)
	return _message
  end,

  HandleMessage = function(event, side, channel, replyChannel, message, distance)
    message = textutils.unserialize(message)
	message.content = textutils.unserialize(message.content)
	 --[[ if channel == modem.channels.ping and message.content == 'Ping!' and not pocket then
	  --  modem.SendMessage(replyChannel, 'Pong!', nil, message.messageID)
	  if channel == modem.channels.ping and message.content == 'Ping!' and pocket then
	    modem.SendMessage(replyChannel, current.Fingerprint, nil, message.messageID)
	  elseif message.destinationID ~= nil and message.destinationID ~= os.getComputerID() then]]--
	  if pocket then 
	    if message.content == 'Ping!' or message.content =='OutOfRange' or message.content == true or message.content == false then
	      modem.Responder(event, side, channel, replyChannel, message, distance)
		end
	  elseif not pocket then
	    if message.content ~= 'Pong!' and message.content ~= 'OutOfRange' and message.content ~= 'Ping!' then
	      modem.Responder(event, side, channel, replyChannel, message, distance)
	    end
	  end
  end,

  FormatMessage = function(message, messageID, destinationID)
    return {
	  content = textutils.serialize(message),
  	  senderID = os.getComputerID(),
	  senderName = os.getComputerLabel(),
	  channel = channel,
	  replyChannel = reply,
	  messageID = messageID or math.random(10000),
	  destinationID = destinationID
    }
  end,
  
	Initialise = function()
		if modem.isPresent() then
			for i, c in pairs(modem.channels) do
				modem.Open(c)
			end
		end
	end,
}

Events ={}

function createFingerprint() --Saves the fingerprint to the PDA
  LogFile.i('Fingerpring Created', runningProgram)
  if not fs.exists('.fingerprint') then
    local fingerprint = generateFingerprint() --Generates the finger print and stores it in a variable
	current.Settings.Whitelist = fingerprint --Stores the fingerprint in the table 'Settings'
  else
    os.reboot()
  end
end

function generateFingerprint()
 LogFile.i('Fingerprint Generated', runningProgram)
 local fingerprint = ""
  for i=1, 256 do --Repeats 256 times
    char = math.random(32, 126) --Creates A Random Digit
	fingerprint = fingerprint .. string.char(char) --Adds the random digit on the end of the others
  end
  return fingerprint  --Returns the fingerprint completed after the loop has finished
end

function pingPDA()
  modem.SendMessage(modem.channels.ping, 'Ping!', modem.channels.request)
  pingTimer = os.startTimer(0.6)
end

local DoorTimer = nil
function OpenDoor()
	if current.Settings.redstoneOutsideSetup then
		redstone.setOutput(current.Settings.redstoneOutsideSetup, true)
		DoorTimer = os.startTimer(0.6)
	end
end
function CloseDoor()
	if current.Settings.redstoneOutsideSetup and current.Allow ~= true then
	  redstone.setOutput(current.Settings.redstoneOutsideSetup, false)
	end
end

function loadSettings()
  LogFile.i('Loading Settings', runningProgram)
  if fs.exists('systemFiles/Programs/rangeLockSettings') then
		local f = fs.open('systemFiles/Programs/rangeLockSettings', 'r')
		if f then
			current.Settings = textutils.unserialize(f.readAll())
			LogFile.i('Settings Loaded', runningProgram)
		end
		f.close()
	else
		hostSetup()
	end
end

function SaveSettings()
    LogFile.i('Saving Settings', runningProgram)
	current.Settings = current.Settings or {}
	local f = fs.open('systemFiles/Programs/rangeLockSettings', 'w')
	if f then
		f.write(textutils.serialize(current.Settings))	    
		LogFile.i('Settings Saved', runningProgram)
	end
	f.close()	
end

function eventRegister(event, functionToRun)
	if not Events[event] then
		Events[event] = {}
	end
	table.insert(Events[event], functionToRun)
	LogFile.i('Event: '..tostring(event)..' Registered', runningProgram)
end

function RegisterPDA()
while true do
 sleep(0)
  titleBar.draw('HbombOS Secuity Suite', 'RangeLock Registration', colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Insert Your PDA Into A Disk Drive', 6)
  printer.centered('Attached To This Computer To Sync It With The System', 7)
  printer.centered('You Can Have One PDA For All Your Systems!', 8)
  printer.centered('Press [ALT] To Reload Settings And Return', 19)
  event, side = os.pullEvent()
  if event == 'disk' then
	if disk.hasData(side) then
		local path = disk.getMountPath(side)
		local fingerprint = nil
		if fs.exists(path..'/.fingerprint') then
		    LogFile.i('Registering PDA', runningProgram)
			local h = fs.open(path..'/.fingerprint', 'r')
			if h then
				local str = h.readAll()
				if #str == 256 then
					fingerprint = str
				end
			end
			h.close()
		end
		addStartup = true
		if not fingerprint then
		  fingerprint = generateFingerprint()
		  local h = fs.open(path..'/.fingerprint', 'w')
		  h.write(fingerprint)
		  h.close()
		end
		if addStartup then
		  local h = fs.open('systemFiles/Programs/rangeLock', 'r')
		  local startup = h.readAll()
	  	  h.close()
		  local h = fs.open(path..'/startup', 'w')
		  h.write(startup)
		  h.close()
		end
		download.git("https://raw.githubusercontent.com/hbomb79/securitySystemPro/master/versionPocket", "/systemFiles/Programs/rangeLockVersionP")
		if fs.exists(path..'/version') then fs.delete(path..'/version') end
		fs.copy('systemFiles/Programs/rangeLockVersionP', path..'/version')
		if not FingerprintIsOnWhitelist(fingerprint) then
			table.insert(current.Settings.Whitelist, fingerprint)
			LogFile.i('Fingerprint Added To Whitelist', runningProgram)
			SaveSettings()
		end  
		  disk.eject(side)
		  LogFile.i('PDA Registered', runningProgram)
          printer.centered('PDA Registered', 19)
          sleep(1)
	end
  elseif event == 'key' then
    if side == keys.leftAlt or side == keys.rightAlt then config = false initialise() break end
  end
end
  return
end

function removeProgram()
LogFile.i('Function removeProgram Called', runningProgram)
while true do
 sleep(0)
  titleBar.draw('HbombOS Secuity Suite', 'RangeLock Remove', colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Insert Your PDA Into A Disk Drive', 6)
  printer.centered('Attached To This Computer To Delete Files Off Of It', 7)
  printer.centered('Press [ALT] To Reload Settings And Return', 19)
  event, side = os.pullEvent()
  if event == 'disk' then
	if disk.hasData(side) then
		local path = disk.getMountPath(side)
		local fingerprint = nil
		if fs.exists(path..'/.fingerprint') then --Removes Fingerprint
		  fs.delete(path..'/.fingerprint')
		end
		if fs.exists(path..'/startup') then --Removes Startup File
		  fs.delete(path..'/startup')
		end
		if fs.exists(path..'/api/') then --Removes API Directory And Contents
		  fs.delete(path..'/api/')
		end
		if fs.exists(path..'/version') then --Removes the version file
		  fs.delete(path..'/version')
		end
		disk.eject(side)
		LogFile.i('PDA Information Removed', runningProgram)
		printer.centered('All Data On PDA Removed', 19)
		sleep(1)
	end
  elseif event == 'key' then
    if side == keys.leftAlt or side == keys.rightAlt then config = false initialise() break end
  end
end
  return
end

function unRegisterPDA()
LogFile.i('Unregister PDA Function Called', runningProgram)
while true do
 sleep(0)
  titleBar.draw('HbombOS Secuity Suite', 'RangeLock Un-Registration', colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Insert Your PDA Into A Disk Drive', 6)
  printer.centered('Attached To This Computer To Un-Register It', 7)
  printer.centered('Press [ALT] To Reload Settings And Return', 19)
  event, side = os.pullEvent()
  if event == 'disk' then
	if disk.hasData(side) then
	    LogFile.i('Un Registering PDA', runningProgram)
		local path = disk.getMountPath(side)
		local fingerprint = nil
		if fs.exists(path..'/.fingerprint') then
		  local f = fs.open(path..'/.fingerprint', 'r')
		  PDAfingerprint = f.readLine()
		  f.close()
		  
		  for _, entry in ipairs(current.Settings.Whitelist) do
		    if entry == PDAfingerprint then
			 if current.Settings.Whitelist then
			  table.remove(current.Settings.Whitelist, _)
			  SaveSettings()
			  LogFile.i('Fingerprint Removed, PDA Unregistered', runningProgram)
			  printer.centered('Fingerprint Removed From Whitelist', 19)
			  sleep(1)
			 else
			   LogFile.i('Table Whitelist Appears To Be Missing', runningProgram)
			   error'Table Appears To Be Missing!'
			 end
			end
		  end
		end
		disk.eject(side)
	end
  elseif event == 'key' then
    if side == keys.leftAlt or side == keys.rightAlt then config = false initialise() break end
  end
end
  return
end

function FingerprintIsOnWhitelist(fingerprint)
	if current.Settings.Whitelist then
		for i, f in ipairs(current.Settings.Whitelist) do
			if f == fingerprint then
				return true
			end
		end
	end
	return false
end

function nomodem()
  titleBar.draw('HbombOS Security Suite', 'RangeLock', colors.cyan, 256, 128, 256, 1)
  if pocket then
    print('Please Add A Wireless Modem To This PDA')
	print()
	print('Click Anywhere To Reboot')
	os.pullEvent('mouse_click')
	os.reboot()
  else
    LogFile.i('No Modem Attached', runningProgram)
    printer.centered('Please Attach A Wireless Modem To This Computer', 6)
	printer.centered('Well Scan For You', 19)
  end
  os.pullEvent('peripheral')
  scanModem()
end

function startHost() --Register Function ' Wireless.Responder' On Host Computer To Check Fingerprint Sent By PDA
  LogFile.i('StartHost called', runningProgram)
  if not modem.isPresent() then
    nomodem()
  end
 modem.Initialise()
 modem.Responder = function(event, side, channel, replyChannel, message, distance)
  if channel == modem.channels.request and distance < current.Settings.distance then
    if FingerprintIsOnWhitelist(message.content) then
	  modem.SendMessage(modem.channels.reply, true)
	  current.Allow = true
	  current.Denied = false
	  getStatus()
	  OpenDoor()
	else
	  current.Allow = false
	  current.Denied = true
	  CloseDoor()
	  getStatus()
	  modem.SendMessage(modem.channels.reply, false)
	end
  end
  if distance > current.Settings.distance then
    modem.SendMessage(modem.channels.reply, 'OutOfRange')
	current.Denied = false
	current.Allow = false
	CloseDoor()
	getStatus()
  end  
 end
pingPDA()
end


function getStatus()
 local function hostStatus()
    if current.Allow then
	  current.status = ('Access Granted!')
	elseif current.Denied then
	  current.status = ('Access Denied!')
	else
	  current.status = ('System Ready!')
	end
  end
  
  local function PDAstatus()
    if current.Denied then
      current.status = 'Access Denied!'
    elseif current.Allow then
      current.status = 'Access Granted!'
    else
      current.status = 'System Ready!'
    end
	printer.centered(current.status, 8)
  end
  if pocket then PDAstatus() else hostStatus() end
end

function startPDA() --Registers Function 'Wireless.Responder' On PDA To Show Status Of Door
if not modem.isPresent() then
  nomodem()
end
modem.Initialise()
os.loadAPI('/api/download') --Download.git Api, Just here for convenience
os.loadAPI('/api/systemCheck') --System Checker
os.loadAPI('/api/update') --Update Checker
os.loadAPI('/api/printer') --printer.centered
os.loadAPI('/api/titleBar') --Title Bar Drawing Method
os.loadAPI('/api/errora') --Custom Blue Screen Of Death Syntax: Error Code, Error Message, Autoreboot[Boolean]
os.loadAPI('/api/LogFile') --Log File Allowing Advanced Debugging
LogFile.i('PDA APIs Loaded', runningProgram)

updateState = update.Check()

if updateState == 'ERROR' then errora.err('The Update Checker Ran Into An Issue!', 'Error Received', true) elseif updateState == true then pocketAPI() end --Checks For An Update On Github And Downloads

if not modem.isPresent() then
  term.clear()
  print('Please Attach A Wireless Modem To Continue')
end
  if fs.exists('.fingerprint') then
    local h = fs.open('.fingerprint', 'r')
      if h then
        current.Fingerprint = h.readAll()
	  else
  	    createFingerprint()
	  end
	  h.close()
  else
    createFingerprint()
  end

	modem.Responder = function(event, side, channel, replyChannel, message, distance)
		if channel == modem.channels.ping and message.content == 'Ping!' then
			modem.SendMessage(modem.channels.request, current.Fingerprint, modem.channels.reply, nil, message.senderID)
		elseif channel == modem.channels.reply then
			if message.content == true then
			 if not current.Allow then
			  outofrange = false
              current.Allow = true
			  current.Denied = false
			  OORwait = false
			 end
			elseif message.content == false then
			 if not current.Denied then
			  outofrange = false
			  current.Allow = false
			  current.Denied = true
			  OORwait = false
			 end
			end
			refreshTimer = os.startTimer(0)
		end
	end
end

function timerHandler(event, timer) --Handles timer completion events and carries out the appropriate action
  if timer == pingTimer then
    pingPDA()
  elseif timer == DoorTimer then
    CloseDoor()
  elseif timer == refreshTimer then
	if pocket then sleep(1) end
    current.Allow = false
    current.Denied = false
    getStatus()
	if not pocket then pingPDA() end
  end
end

function checkConfig()
LogFile.i('Config Login', runningProgram)
  config = true
  term.clear()
  titleBar.draw('HbombOS Security Suite', 'RangeLock', colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Enter Your Administartor Password', 6)
  printer.centered('To Access Your Configuration Options', 7)
  local f = fs.open('systemFiles/Security/adminPass', 'r')
  adminPassFile = f.readLine()
  f.close()
  configText = 'Password: '
  term.setCursorPos(termX/2-#configText, 10)
  write(configText)
  configInput = read('*')
  if configInput == adminPassFile then config = true element.opacity(configBtn, false) configMenu() drawScreen() pingPDA() config = false else printer.centered('Incorrect Password.. Returning', 19) sleep(0.5) drawScreen() pingPDA() end
end

function configMenu()
LogFile.i('Config Menu', runningProgram)
  titleBar.draw('HbombOS Security Suite', 'RangeLock Settings', colors.cyan, 256, 128, 256, 1)
  printer.centered('Pick An Option Below', 6)
  local continue = false
  local options = {
  	    {'Register Pocket Computers', function()
          RegisterPDA()
		  config = false
		end},
		{'Unregister Pocket Computers', function() 
		  unRegisterPDA()
		  config = false
		end}, 
		{'Remove Files From Pocket Computer', function()
		  removeProgram()
		  config = false
		end}, 
		{'Reset Configuration', function()
		  LogFile.i('Removing Config', runningProgram)
		  fs.delete('systemFiles/Programs/rangeLockSettings')
		  pressed = false
		  config = false
		  printer.centered('Removed!', 19)
		  sleep(1)
		  os.reboot()
		end},
		{'Re Configure', function() hostSetup() end},
		{'Cancel And Return', function()
		  config = false
		  term.clear()
          return
		end}
	}
	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 6)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
		  options[selected][2]()
		  wait = false
		end
		draw()
	end
	return continue
end

function scanModem() --Peripheral Managements Prevents Most Crashes When Removing Modem
  LogFile.i('Scanning For Modem')
  if not modem.isPresent() then
    LogFile.w('No Modem Connected To PC', runningProgram)
    nomodem()
  else
    initialise()
  end
end

function initialise() --Registers All Events To Autorun Functions, e.g If I press a key it will run keyPress
  configBtn = btnInit('Enter Config', nil, nil, termX, termY-1, 1, colors.cyan, 1, 256, function() element.opacity(configBtn, false) checkConfig() end, false, nil, nil, nil, nil)
  configBtn.x = termX-32
  --if not pocket then eventRegister('key', keyPress) end
  eventRegister('timer', timerHandler)
  eventRegister('terminate', function(event) errora.err('Termination Detected', 'You Attempted To Terminate The Program!' , true, false) end)
  eventRegister('modem_message', modem.HandleMessage)
  eventRegister('peripheral', scanModem)
  eventRegister('peripheral_detach', scanModem)
  eventRegister('mouse_click', checkClick)
  --Loading Configuration
  modem.Initialise()
  if pocket then
    startPDA() --Configures The PDA Responder Function
  else
    LogFile.i('Main Function Started', runningProgram) 
    loadSettings()
    startHost() --Set up the host system
  end
  eventLoop() --Starts the program waiting for the events to occur
end

function drawScreen()
  titleBar.draw('HbombOS Security Suite', 'Range Lock', colors.cyan, 256, 128, 256, 1)
  term.setTextColor(1)
  printer.centered('Range Lock Security', 6)
  term.setTextColor(1)
  element.opacity(configBtn, true)
  if pocket then
    printer.centered('Mobile System', 19)
  elseif not pocket then
    term.setBackgroundColor(128)
    term.setCursorPos(termX-#'Host Server', 1)
	write('Host Server')
	term.setBackgroundColor(256)
  end
  --if not pocket then term.setTextColor(1) printer.centered('Press [alt] To Enter Setup', 19) end
end

function eventLoop() --This runs the functions that was assigned to the event in initialise()
  drawScreen()
  while isRunning do
	if current.Allow or current.Denied then getStatus() elseif current.status == 'Booting System' then pingPDA() current.status = 'System Ready!' end
    if current.status == 'Access Denied!' then term.setTextColor(colors.red) elseif current.status == 'Access Granted!' then term.setTextColor(colors.lime) else term.setTextColor(colors.blue) end
    printer.centered(current.status, 8)
	local event, arg1, arg2, arg3, arg4, arg5, arg6 = os.pullEventRaw()
	  if Events[event] then
		for i, e in ipairs(Events[event]) do
		  e(event, arg1, arg2, arg3, arg4, arg5, arg6)
		end
      end
   end
end

function loadAPIS()
  os.loadAPI('api/errora')
  os.loadAPI('api/update')
  os.loadAPI('api/titleBar')
  os.loadAPI('api/systemCheck')
  os.loadAPI('api/download')
  os.loadAPI('api/printer')
  os.loadAPI('api/LogFile')
end

if not term.isColor() then
  printer.centered('The Software Requires An Advanced Machine Run', 19)
  sleep(3)
  os.shutdown()
end
  local _, err = pcall(initialise) --Error Catching, All Functions Are Called From initialise() at some point...
  if err then
    term.setCursorBlink(false)
    loadAPIS()
	LogFile.e('Range Lock Crash: '..err, runningProgram)
	errora.err(err, 'Range Lock Crash, Report Code Above', true, true) --BSoD for protection, the 'true' is an auto-reboot option to prevent the door computer waiting for a prompt
  end