os.pullEvent = os.pullEventRaw

termX, termY = term.getSize()

----------------------
--Assign Text Values--
----------------------
diskText = "Side: "
nameDriveText = "File Name: "
nameDriveDataText = "Security Key: "
RedstoneOutText = "Output Side: "
RedstoneInputText = "Input Side: "
RedstoneTimeText = "Time: "

-------------------------
--Assign Variable Types--
-------------------------
_int = 1
_string = ""
setup = false
config = false

-------
--END--
-------

function readN(len, replaceChar, HasToBeNum)
  Num = false
  term.setTextColor(1)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
   checkKey()
        e,p1 = os.pullEvent()
		  if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		    p1 = tonumber(p1)
		    Num = true
		  elseif type(p1) == type(_string) then
		    term.setTextColor(colors.red)
		    Num = "Word"
		    return Num
		  end
        if e=="char" then
          if #input < len then
		    if type(p1) == type(_int) then
                input = input .. p1
                term.write(replaceChar or p1)
			end
          end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input
end


function RSstart(Oside)
  Oside = Oside or back
  rs.setOutput(Oside, true)
  return true
end

function RSstop()
  for i=rsTime, 0, -1 do
    printer.centered("Depowering Redstone In: "..i, 14)
	sleep(1)
	if i <= 0 then
	  rs.setOutput(rsOutput, false)
	  return true
	end
  end
end

function RedstoneInputReceive()
  while true do
    sleep(0)
	rsReceive = redstone.getInput(inputSide)
	  if rsReceive then
	    printer.centered('Redstone Signal Received!', 19)
	    break
	  end
  end
  return true
end

function checkKey()
--if not setup then
  if pressed then
    oldX, oldY = term.getCursorPos()
    printer.centered("Insert A Valid Key-card To Enter Set-up", 19)
    term.setCursorPos(oldX, oldY)
  else
    oldX, oldY = term.getCursorPos()
    printer.centered("Press [alt] To Change Your Settings", 19)
    term.setCursorPos(oldX, oldY)
  end
--end
end

function waitForSetupKey()
	while true do
	 checkKey()
	  local event, arg = os.pullEvent()
	  if event == 'mainFunctionDone' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or arg == keys.rightAlt then
		pressed = true
		checkKey()
	  	return arg 
		end
	  end
	end
end

function checkDisk()
  if fs.exists('disk/'..diskPath) then
    local f = fs.open('disk/'..diskPath, 'r')
	checkDiskData = f.readLine()
	f.close()
	  if checkDiskData == diskKey then
	    return true
	  else
        return false
	  end
  else
    return false
  end
end

function configMenu()
  drawTitleBar()
  term.setTextColor(1)
  term.setBackgroundColor(256)
  term.clear()
  PrintCentered("HbombOS Security Suite", 4)
  PrintCentered("Keycard Configuration", 5)
  PrintCentered("Please Enter Your Administrator Password", 7)
  PrintCentered("To Open The Settings Menu", 8)
  local continue = false
  local options = {
  	    {'Register Key Cards', function()
		  local function diskInit()
            disksReg = 0
            while true do
	           titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	           printer.centered("Insert Disks Into The Disk Drives Now To Sync Them", 6)
	           printer.centered("Press ALT To Save", 9)
	           printer.centered("Registered Disks: "..disksReg, 11)
	           event, side = os.pullEvent()
	             if event == "disk" then
		           if side == driveSide then
		             local f = fs.open("disk/"..diskPath, "w")
			           f.writeLine(diskKey)
			           f.close()
			           printer.centered("Files Written To Disk Drive", 19)
			           disksReg = disksReg + 1
			           disk.eject(driveSide)
					end
	             elseif event == 'key' then
				   if side == keys.leftAlt or side == keys.rightAlt then
				      pressed = false
					  config = true
				      --os.reboot()
					  return
					  
				   end
				 end
			end
		end
    diskInit()
		end},
		{'Unregister Keycards', function() 
		  local function diskUnInit()
            disksReg = 0
            while true do
	           titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	           printer.centered("Insert Disks Into The Disk Drives Now To Remove Their", 6)
	           printer.centered("Right To Use This Computer", 7)
	           printer.centered("Press ALT To Save", 9)
	           event, side = os.pullEvent()
	             if event == "disk" then
		           if side == driveSide then
				       fs.delete("disk/"..diskPath)
			           printer.centered("Files Deleted From Disk", 19)
			           disk.eject(driveSide)
					end
	             elseif event == 'key' then
				   if side == keys.leftAlt or side == keys.rightAlt then
				      pressed = false
					  config = true
				      --os.reboot()
					  return
					  
				   end
				 end
			end
		end
    diskUnInit()
		end}, 
		{'Reset Config', function()
		  fs.delete('systemFiles/Programs/keycardConfig')
		  pressed = false
		  config = true
		  printer.centered('Removed!', 19)
		  sleep(1)
		  os.reboot()
		end},
		{'Cancel', function()
		  pressed = false
		  config = true
          return
		end}
	}
	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 10)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
		  options[selected][2]()
		  wait = false
		end
		draw()
	end
	return continue
end

function configEdit()
  config = true
  disk.eject(driveSide)
  titleBar.draw('HbombOS Security Suite', 'Keycard Lock Setup', colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Enter Your Administrator Password', 6)
  printer.centered('As Added Security!', 7)
  configText = 'Password: '
  term.setCursorPos(termX/2-#configText, 10)
  write(configText)
  ConfigInput = read("*")
  local f = fs.open('systemFiles/Security/adminPass', 'r')
  adminPasswordFile = f.readLine()
  f.close()
  if ConfigInput == adminPasswordFile then configMenu() else pressed = false return end
end

function main() --Waits For Disk Event!
  while true do
    term.clear()
    titleBar.draw('HbombOS Security Suite', 'Keycard Lock', colors.cyan, 256, 128, 256, 1)
	checkKey()
    printer.centered('Awaiting Disk Insert In Drive Side: '..driveSide, 6)
    event, side = os.pullEvent("disk")
	  if event == "disk" then
	    if side == driveSide then	   
	      if checkDisk() then 
		    printer.centered('Correct Keycard', 19)
		    return true 
		  else 
		    disk.eject(side)
		    printer.centered('Invalid Disk Entered!', 19)
			sleep(1)
			disk.eject(side)
		  end
		end
      end
  end
end

function Start() --Starts The Program
  while true do
    local key = nil
    local success = false
    parallel.waitForAll(function()success = main() os.queueEvent('mainFunctionDone') end, function() key = waitForSetupKey() end)
	  if success and key == keys.leftAlt or key == keys.rightAlt then
        success = configEdit()
	  end
	 return success
  end  
end

function LoopMain() --Continuously starts the program...
while true do
  if useInput == "true" then
    term.setCursorBlink(false)
    parallel.waitForAny(Start, RedstoneInputReceive)
	if config == false then
	  disk.eject(driveSide)
      RSstart(rsOutput)
      RSstop()
      term.setCursorBlink(true)
	else
	  config = false
	end
  else
    Start()
	if config == false then
	  disk.eject(driveSide)
      RSstart(rsOutput)
      RSstop()
	else
	  config = false
	end
  end
end
end


function loadConfig()
 term.clear()
 titleBar.draw('HbombOS Security Suite', 'Keycard Lock', colors.cyan, 256, 128, 256, 1)
 printer.centered('Loading Configuration', 19)
  local f = fs.open('systemFiles/Programs/keycardConfig', 'r')
    driveSide = f.readLine()
	diskPath = f.readLine()
	diskKey = f.readLine()
	rsOutput = f.readLine()
	rsTime = f.readLine()
	rsTime = tonumber(rsTime)
	useInput = f.readLine()
	  if useInput == "true" then
	    inputSide = f.readLine()
	  end
	f.close()
end

function setup() --If the config file does not exists, this function will be run

  local function waitForConfig()
    while true do
      sleep(0)
	  event, key = os.pullEvent()
	  if event == "key" then
	    if key == keys.leftAlt or key == keys.rightAlt then
	      return key
	    end
	  end
    end
  end
  
  local function printSetup()
	titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
    printer.centered("It Appears That You Have Not Used", 6)
    printer.centered("The Program Before", 7)
    printer.centered("Click Anywhere To Get Started With Set-up", 9)
	os.pullEvent("mouse_click")
  end
  
  local function diskSide()
  while true do
    titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	printer.centered("On What Side Is The Disk Drive On?", 6)
	term.setCursorPos(termX/2-(#diskText),10)
	  write (diskText)
	  local vside = false
		diskDriveSide = read()
		for k,v in pairs(rs.getSides()) do
			if v == diskDriveSide then
				vside = true
				break
			end
		end
		if vside then break end
		  printer.centered("Invalid side!", 10)
		  sleep(0.5)
		  term.clear()
		end
  end
  
  local function nameDrive()
    while true do
      titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	  printer.centered("For Added Security, Pick The FileName", 6)
	  printer.centered("This Is Where The Security Key Will Be Stored", 7)
      term.setCursorPos(termX/2-#nameDriveText, 10)
	  write(nameDriveText)
	  nameDriveInput = read()
	    if nameDriveInput ~= "" then nameDriveInput = tostring(nameDriveInput) break end
	end
  end
  
  local function nameDriveData()
    while true do
      titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	  printer.centered("For Added Security, Pick The Security Key", 6)
	  printer.centered("That Will Be Put On The Path You Specified", 7)
      term.setCursorPos(termX/2-#nameDriveDataText, 10)
	  write(nameDriveDataText)
	  nameDriveDataInput = read()
	    if nameDriveDataInput ~= "" then nameDriveDataInput = tostring(nameDriveDataInput) break end
	end
  end
  
  local function diskInit()
   disksReg = 0
    while true do
	  titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	  printer.centered("Insert Disks Into The Disk Drives Now To Sync Them", 6)
	  printer.centered("With The Data You Have Specified", 7)
	  printer.centered("Press ALT To Continue To Next Step", 9)
	  printer.centered("Registered Disks: "..disksReg, 11)
	  event, side = os.pullEvent()
	    if event == "disk" then
		  if side == diskDriveSide then
		    local f = fs.open("disk/"..nameDriveInput, "w")
			if f then
			  f.writeLine(nameDriveDataInput)
			  f.close()
			else
			  printer.centered('Files Already Detected!', 18)
			  printer.centered('Press Y To Delete Or N To Pick Another Path', 19)
			  event, press = os.pullEvent()
			  if event ==  "key" then
			    if press == keys.y then
				  fs.delete('disk/'..nameDriveInput)
				  f.writeLine(nameDriveDataInput)
			      f.close()
				elseif press == keys.n then
			      nameDrive()
			      nameDriveData()
				end
			  end
			end
			printer.centered("Files Written To Disk Drive", 19)
			disksReg = disksReg + 1
			disk.eject(diskDriveSide)
		  end
		end
	end
  end
  
  local function redstoneOutput()
   while true do
	titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	printer.centered("What Side Should The Redstone Output Be?", 6)
	term.setCursorPos(termX/2-(#RedstoneOutText),10)
	  write (RedstoneOutText)
	  local vside = false
		RedstoneOutSide = read()
		for k,v in pairs(rs.getSides()) do
			if v == RedstoneOutSide then
				vside = true
				break
			end
		end
		if vside then break end
		  printer.centered("Invalid side!", 10)
		  sleep(0.5)
		  term.clear()
		end
   end
  
  local function redstoneTime()
   while true do
	titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	printer.centered("How Long Should We Output Redstone For", 6)
	term.setCursorPos(termX/2-(#RedstoneTimeText),10)
	  write (RedstoneTimeText)
	  RedstoneTimeInput = readN(3)
	  if RedstoneTimeInput == "Word" then term.setCursorBlink(false) printer.centered("Numbers Only!", 19) sleep(0.5) term.setCursorBlink(true)
	    elseif not RedstoneTimeInput then printer.centered("Cannot Be Nil", 19) sleep(0.5)
		  elseif RedstoneTimeInput ~= "" then break end
   end
  end
  
  local function redstoneInputSetting()
	while true do
	  titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	  printer.centered("Do you want the computer to react to redstone", 6)
	  printer.centered("the same way it would if the keycard was entered?", 7)
	  printer.centered("You get to choose what side the", 10)
	  printer.centered("redstone has to be applied to", 11)
	  printer.centered("Y/N", 13)
	    event, key = os.pullEvent()
		if event == "key" then
		  if key == keys.y then
		    redstoneInSettingUse = true
			return true
		  elseif key == keys.n then
		    redstoneInSettingUse = false
			return false
		  end
		end
	end
  end
  
  local function redstoneInputSettingSide()
    while true do
	  titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	  printer.centered("What Side Does The redstone input need to be on", 6)
  	  printer.centered("for the computer to react?", 7)
	  titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	  printer.centered("What Side Should The Redstone Output Be?", 6)
	  term.setCursorPos(termX/2-(#RedstoneInputText),10)
	    write (RedstoneInputText)
	    local vside = false
		 RedstoneInputSide = read()
		  for k,v in pairs(rs.getSides()) do
		  	  if v == RedstoneInputSide then
				  vside = true
				  break
			  end
		  end
		  if vside then break end
		    printer.centered("Invalid side!", 10)
		    sleep(0.5)
		    term.clear()
		  end
	end
  
  local function save()
	titleBar.draw("HbombOS Security Suite", "Keycard Setup", colors.cyan, 256, 128, 256, 1)
	printer.centered("Thank You For Setting Up Your Keycard Lock", 6)
	printer.centered("Please Wait While We Save Your Settings...", 8)
	printer.centered("Opening File Handler", 19)
	local f = fs.open('systemFiles/Programs/keycardConfig', 'w')
	printer.centered('Saving Disk Oreintation', 19)
	f.writeLine(diskDriveSide)
	sleep(0)
	printer.centered('Saving Security Names', 19)
	f.writeLine(nameDriveInput)
	sleep(0)
	printer.centered('Saving Security Key', 19)
	f.writeLine(nameDriveDataInput)
	sleep(0)
	printer.centered('Saving Redstone Output Information', 19)
	f.writeLine(RedstoneOutSide)
	sleep(0)
	f.writeLine(RedstoneTimeInput)
	sleep(0)
	printer.centered('Saving Redstone Input Settings', 19)
	f.writeLine(tostring(redstoneInSettingUse))
	sleep(0)
	  if redstoneInSettingUse then
	    printer.centered('Saving Redstone Input Side', 19)
		f.writeLine(RedstoneInputSide)
		sleep(0)
	  end
  
  printer.centered('Save Done, Rebooting System', 19)
  sleep(1)
  os.reboot()
  end
  -- Calls All The Functions To Setup The Program
  printSetup()
  diskSide()
  nameDrive()
  nameDriveData()
while true do
  parallel.waitForAny(diskInit, waitForConfig)
  if disksReg < 1 then printer.centered("Please Register A Card!", 19) sleep(1) else break end
end
  redstoneOutput()
  redstoneTime()
    if redstoneInputSetting() then redstoneInputSettingSide() end
  save()
end

if not fs.exists('systemFiles/Programs/keycardConfig') then
  setup()
else
  loadConfig()
  LoopMain()
end