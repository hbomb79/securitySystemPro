os.pullEvent = os.pullEventRaw
runningProgram = shell.getRunningProgram()
LogFile.i('Keycard V2 Program Running... ', runningProgram)
termX, termY = term.getSize()
isSetup = false

local blacklistedChars = {
	'/',
	'*',
	'(',
	')',
	'~',
	'`',
	'!',
	'@',
	'#',
	'$',
	'%',
	'^',
	'&',
	'-',
	'_',
	'+',
	'=',
	'?',
	'>',
	'<',
	'.',
	',',
	'|',
	'\\'
}

current = {
	settings = {}
	}
Events = {}
elements = {}

function btnInit(btnText, btnWidth, btnHeight, btnX, btnY, btnTC, btnBG, oTC, oBG, onClick, toggle, secBG, secTC, secText, parent) --Function to create button
	local btn = element.create(btnText, btnWidth, btnHeight, btnX, btnY, btnTC, btnBG, oTC, oBG, onClick, toggle, secBG, secTC, secText, parent) --Calls API to generate button
	table.insert(elements, btn) --Inserts into table so it can be scanned later
	element.opacity(btn, true) --Sets visibility to false
	return btn
end

function doClick(event, btn, x, y)
	functionToRun = element.tryClick(elements, x, y)
	if functionToRun then
		functionToRun()
	end
end

function checkClick(event, btn, x, y)
	if not isSettingUp then
		doClick(event, btn, x, y)
	end
end

function drawTitleBar()
	titleBar.draw('HbombOS Secuity Suite', 'Keycard Lock', colors.cyan, 256, 128, 256, 1)
end

function setup()
	setupContinue = btnInit('Next', nil, nil, termX-#'Next'-2, termY-1, colors.white, colors.cyan, 1, 256, nil, false, nil, nil, nil, nil)
	setupConfirm = btnInit('Enable', nil, nil, termX-#'Enable'-4, termY-1, colors.white, colors.green, 1, 256, nil, false, nil, nil, nil, nil)
	setupDeny = btnInit('Disable', nil, nil, termX-#'Enable'-#'Disable'-6, termY-1, colors.white, colors.red, 1, 256, nil, false, nil, nil, nil, nil)
	
	local function resetButton()
		for _, elem in ipairs(elements) do
			element.opacity(elem, false)
		end
	end
	
	local function setupTitle()
		resetButton()
		titleBar.draw('HbombOS Secuity Suite', 'Keycard Lock Setup', colors.cyan, 256, 128, 256, 1)
	end
	
	local function welcome()
		setupTitle()
		printer.centered('This Guide Will Help Setup Your Keycard Lock', 6)
		printer.centered('Click \'Next\' To Begin!', 8)
		setupContinue.func = function() os.queueEvent('start') end
		while true do
			
		end
	end
	
	local function driveSide()
		setupTitle()
		setupContinue.func = function() os.queueEvent('Continue') end
		printer.centered("What Side Is The Disk Drive On", 6)
		printer.centered("Click A Button To Decide Your", termY-1)
		printer.centered("Drive Side", termY)
		right = btnInit('Right', nil, nil, 5, 10, 1, colors.cyan, 1, 256, function() current.settings.driveSide = 'right' end, true, colors.green, 1, 'Right', 'drive')
		right.toggleState = 2
		element.opacity(right, true)
		current.settings.driveSide = 'right'
		left = btnInit('Left', nil, nil, right.x+right.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.driveSide = 'left' end, true, colors.green, 1, 'Left', 'drive')
		top = btnInit('Top', nil, nil, left.x+left.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.driveSide = 'top' end, true, colors.green, 1, 'Top', 'drive')
		bottom = btnInit('Bottom', nil, nil, top.x+top.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.driveSide = 'bottom' end, true, colors.green, 1, 'Bottom', 'drive')
		back = btnInit('Back', nil, nil, bottom.x+bottom.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.driveSide = 'back' end, true, colors.green, 1, 'Back', 'drive')
		while true do
			element.opacity(setupContinue, true)
			local event, btn, x, y = os.pullEvent()
			if event == "mouse_click" then
				doClick(event, btn, x, y)
			elseif event == "Continue" then
				break
			end
		end
		
		for _, elem in ipairs(elements) do
			if elem.parent == "drive" then
				element.opacity(elem, false)
			end
		end
		element.opacity(setupContinue ,false)
	end
	

	
	local function fileName()
		setupContinue.func = function() os.queueEvent('submit_Result') end
		while true do
			setupTitle()
			printer.centered('For Ultimate Security We Allow You To Choose', 6)
			printer.centered('The File Name And Contents', 7)
			printer.centered('Please Pick Your File Name Here', 9)
			printer.centered('We Recommend Typing Completely Random Things Here!', 11)
			term.setCursorPos(termX/2-#"File Name: ", 14)
			write('File Name: ')
			element.opacity(setupContinue, true)
			local input = uInput.restrictedEventRead(20, nil, elements, blacklistedChars)
			if input ~= "" then
				current.settings.filePath = input
				break
			end
		end
	end
	
	local function fileContents()
		while true do
			setupTitle()
			element.opacity(setupContinue, true)
			printer.centered('For Supreme The Suite Allows You To Specify', 6)
			printer.centered('The File Name And Contents, So Your Keycard', 7)
			printer.centered('Cant Be Duplicated', 8)
			printer.centered('Please Pick Your File Contents Here', 10)
			printer.centered('This is effectively a PIN you wont need to remember', 11)
			printer.centered('Make it random!', 12)
			term.setCursorPos(termX/2-#"File Contents: ", 14)
			write('File Contents: ')
			local inputContent = uInput.restrictedEventRead(20, nil, elements, blacklistedChars)
			if inputContent ~= "" then
				current.settings.fileContent = inputContent
				break
			end
		end
	end
	
	local function diskRegister()
		setupContinue.func = function() os.queueEvent('Continue') end
		while true do
			setupTitle()
			printer.centered('Please Insert Floppy Disks You Want To Validate', 6)
			printer.centered('They will have the file with the contents',8)
			printer.centered('you chose afterwards',9)
			LogFile.i('Total Known Registerd Disks: ', runningProgram)
			if current.settings.registeredDisks > 0 then printer.centered('', 19) element.opacity(setupContinue, true) else printer.centered('Please Register Atleast One Disk To Continue', 19) element.opacity(setupContinue, false) end
			local event, p1, p2, p3 = os.pullEvent()
			if event == "disk" then
				if p1 == current.settings.driveSide then
					if disk.hasData(current.settings.driveSide) then
						local currentDisk = disk.getMountPath(current.settings.driveSide)
						local f = fs.open(currentDisk.."/"..current.settings.filePath, 'w')
						f.writeLine(current.settings.fileContent)
						f.close()
						LogFile.i('Attempt To write to disk', runningProgram)
						disk.eject(current.settings.driveSide)
						if fs.exists(currentDisk.."/"..current.settings.filePath) then
							LogFile.i('Disk Registeration Complete', runningProgram)
							current.settings.registeredDisks = current.settings.registeredDisks + 1
						else
							LogFile.i('Couldnt Find Files After Registering, Assuming fail', runningProgram)
							errora.err('Something Went Wrong', 'Attempts to create the files on your keycards failed!', false, false)
						end
					end
				end
			elseif event == "mouse_click" then
				doClick(event, p1, p2, p3)
			elseif event == "Continue" then break
			end
		end
	end
	
	local function redstoneSide()
		setupTitle()
		setupContinue.func = function() os.queueEvent('Continue') end
		printer.centered("Redstone Output Side", 6)
		printer.centered("Click A Button To Decide Your", termY-1)
		printer.centered("Redstone Output Side", termY)
		right = btnInit('Right', nil, nil, 5, 10, 1, colors.cyan, 1, 256, function() current.settings.outputSide = 'right' end, true, colors.green, 1, 'Right', 'rsOut')
		right.toggleState = 2
		element.opacity(right, true)
		current.settings.outputSide = 'right'
		left = btnInit('Left', nil, nil, right.x+right.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.outputSide = 'left' end, true, colors.green, 1, 'Left', 'rsOut')
		top = btnInit('Top', nil, nil, left.x+left.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.outputSide = 'top' end, true, colors.green, 1, 'Top', 'rsOut')
		bottom = btnInit('Bottom', nil, nil, top.x+top.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.outputSide = 'bottom' end, true, colors.green, 1, 'Bottom', 'rsOut')
		back = btnInit('Back', nil, nil, bottom.x+bottom.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.outputSide = 'back' end, true, colors.green, 1, 'Back', 'rsOut')
		while true do
			element.opacity(setupContinue, true)
			local event, btn, x, y = os.pullEvent()
			if event == "mouse_click" then
				doClick(event, btn, x, y)
			elseif event == "Continue" then
				break
			end
		end
		
		for _, elem in ipairs(elements) do
			if elem.parent == "rsOut" then
				element.opacity(elem, false)
			end
		end
		element.opacity(setupContinue ,false)
	end
	
	local function redstoneTime()
		while true do
			setupTitle()
			setupContinue.func = function() os.queueEvent('submit_Result') end
			element.opacity(setupContinue, true)
			printer.centered('Redstone Time Setting', 6)
			printer.centered('How Long Should We Output A Redstone Signal For?', 8)
			term.setCursorPos(termX/2-#'Output Time: ', 12)
			write('Output Time: ')
			local input = uInput.eventN(2, nil, elements)
				if input ~= "" then
					current.settings.outputTime = input
					break
				end
		end
		return
	end
	
	local function redstoneInSide()
		setupTitle()
		setupContinue.func = function() os.queueEvent('Continue') end
		printer.centered("Redstone Input Side", 6)
		printer.centered("Click A Button To Decide Your", termY-1)
		printer.centered("Redstone Input Side", termY)
		right = btnInit('Right', nil, nil, 5, 10, 1, colors.cyan, 1, 256, function() current.settings.inputSide = 'right' end, true, colors.green, 1, 'Right', 'rsIn')
		right.toggleState = 2
		element.opacity(right, true)
		current.settings.inputSide = 'right'
		left = btnInit('Left', nil, nil, right.x+right.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.inputSide = 'left' end, true, colors.green, 1, 'Left', 'rsIn')
		top = btnInit('Top', nil, nil, left.x+left.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.inputSide = 'top' end, true, colors.green, 1, 'Top', 'rsIn')
		bottom = btnInit('Bottom', nil, nil, top.x+top.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.inputSide = 'bottom' end, true, colors.green, 1, 'Bottom', 'rsIn')
		back = btnInit('Back', nil, nil, bottom.x+bottom.width+2, 10, 1, colors.cyan, 1, 256, function() current.settings.inputSide = 'back' end, true, colors.green, 1, 'Back', 'rsIn')
		while true do
			element.opacity(setupContinue, true)
			local event, btn, x, y = os.pullEvent()
			if event == "mouse_click" then
				doClick(event, btn, x, y)
			elseif event == "Continue" then
				break
			end
		end
		
		for _, elem in ipairs(elements) do
			if elem.parent == "rsIn" then
				element.opacity(elem, false)
			end
		end
		element.opacity(setupContinue ,false)
	end
	
	local function redstoneInput()
		for _,  elem in ipairs(elements) do
			element.opacity(elem, false)
		end
		setupTitle()
		printer.centered('Would You Like The Computer To Act As', 8)
		printer.centered('If The Pin Was Entered When It', 9)
		printer.centered('Receives A Redstone Input', 10)
		printer.centered('You Get To Pick What Side The Input', 12)
		printer.centered('Has To Come From Next Step', 13)
		yes = btnInit('Enable', nil, nil, termX-#'Enable'-2, termY-1, 1, colors.green, 1, 256, function() current.settings.inputOption = true os.queueEvent('ContinueInput') end, false, nil, nil, nil, nil)
		no = btnInit('Dont Enable', nil, nil, yes.x-#'Dont Enable'-4, termY-1, 1, colors.red, 1, 256, function() current.settings.inputOption = false os.queueEvent('ContinueInput') end, false, nil, nil, nil, nil)
		while true do
			local event, p1, p2, p3 = os.pullEvent()
			if event == "mouse_click" then
				doClick(event, p1, p2, p3)
			elseif event == "ContinueInput" then
				break
			end
		end
		element.opacity(yes, false)
		element.opacity(no, false)
		return
	end
	
	local function save()
		setupTitle()
		printer.centered('You Wanna Know What You Just Made?', 6)
		printer.centered('The Best Descision! Enjoy Your New Keycard Lock!', 8)
		printer.centered('Remember To Use The Enter Config Button To', 10)
		printer.centered('Register More Keycards!', 11)
		printer.centered('Saving Settings... ', 19)
		sleep(1)
		SaveSettings()
		while true do
			printer.centered('Settings Saved, Click Reboot!', 19)
			setupContinue = btnInit('Reboot', nil, nil, termX-#'Reboot'-2, termY-1, 1, colors.cyan, 1, 256, function() os.reboot() end, false, nil, nil, nil, nil)
			event, p1, p2, p3 = os.pullEvent()
			if event == "mouse_click" then
				doClick(event, p1, p2, p3)
			end
		end
	end
	
driveSide()
fileName()
fileContents()
diskRegister()
redstoneSide()
redstoneTime()
redstoneInput()
if current.settings.inputOption then redstoneInSide() end
save()
errora.err('Unknown Thread Escaped', 'How Did You Get Out Here!', true, false)
end

function loadSettings()
  LogFile.i('Loading Settings', runningProgram)
  if fs.exists('systemFiles/Programs/keycardConfig') then
		local f = fs.open('systemFiles/Programs/keycardConfig', 'r')
		if f then
			current.settings = textutils.unserialize(f.readAll())
			LogFile.i('Settings Loaded', runningProgram)
		end
		f.close()
	else
		current.settings.registeredDisks = 0
		setup()
	end
end

function SaveSettings()
    LogFile.i('Saving Settings', runningProgram)
	current.settings = current.settings or {}
	local f = fs.open('systemFiles/Programs/keycardConfig', 'w')
	if f then
		f.write(textutils.serialize(current.settings))	    
		LogFile.i('Settings Saved', runningProgram)
	end
	f.close()	
end


function keyHandler(event, key)
	--Handle Key Events... Deprecated
end

function toggleConfigText()
	if not isSetup then isSetup = true else isSetup = false end
	if isSetup then printer.centered('Insert Valid Keycard To Enter Config', 19)
	elseif not isSetup then printer.centered(' ', 19) end
	if isSetup then configBtn.toggleState = 2 else configBtn.toggleState = 1 end
	element.opacity(configBtn, true)
	term.setCursorBlink(false)
end


function Initialise()
	drawScreen()
	ejectDisk("-a", nil)
	LogFile.i("Initialise Function", runningProgram)
	eventRegister('terminate', function(event) errora.err('Umm, Thats not allowed here!', 'Use the boot menu to access shell', true, false) end)
	eventRegister('mouse_click', checkClick)
	eventRegister('redstone', redstoneHandler)
	eventRegister('key', keyHandler)
	eventRegister('disk', checkDisk)
	eventRegister('timer', timerHandler)
	loadSettings()
	sleep(0.3)
	configBtn = btnInit('Enter Config', nil, nil, termX/2-(#'Enter Config'/2), termY-1, 1, colors.cyan, 1, 256, function() toggleConfigText() end, true, colors.green, nil, nil, nil)
	current.status = 'System Ready'
	drawScreen()
	eventLoop()
end

function eventLoop()
	while true do
		local event, arg1, arg2, arg3, arg4, arg5, arg6 = os.pullEventRaw()
		if Events[event] then
			for i, e in ipairs(Events[event]) do
			  LogFile.i("Event Called: "..tostring(event)..", "..tostring(arg1).." "..tostring(arg2).." "..tostring(arg3).." "..tostring(arg4).." "..tostring(arg5).." "..tostring(arg6), runningProgram)
			  e(event, arg1, arg2, arg3, arg4, arg5, arg6)
			end
		end
	end
end

function eventRegister(event, functionToRun)
	if not Events[event] then
		Events[event] = {}
	end
	table.insert(Events[event], functionToRun)
	LogFile.i('Event: '..tostring(event)..' Registered', runningProgram)
end

function checkDisk(event, side)
	LogFile.i("Validating Disk", runningProgram)
	current.status = 'Validating Disk'
	drawScreen()
	if event == "disk" then
		LogFile.i("Disk Received", runningProgram)
		if side == current.settings.driveSide then
			LogFile.i("Disk In Correct Side", runningProgram)
			local currentDisk = disk.getMountPath(current.settings.driveSide)
			if disk.hasData(current.settings.driveSide) then
				if fs.exists(currentDisk..'/'..current.settings.filePath) then
					local diskFile = fs.open(currentDisk..'/'..current.settings.filePath, 'r')
					local diskContents = diskFile.readAll()
					if tostring(diskContents) == current.settings.fileContent then
						LogFile.i("Correct Disk Entered", runningProgram)
						correctDisk()
						return
					else
						LogFile.i("Incorrect Disk", runningProgram)
						incorrectDisk()
					end
				else
					LogFile.i("Incorrect Disk", runningProgram)
					incorrectDisk()
				end
			end
		end
	end
	current.status = 'System Ready'
	drawScreen()
end

function drawScreen()
	LogFile.i("Screen Drew", runningProgram)
	drawTitleBar()
	printer.centered('Keycard Lock', 6)
	if current.status == 'System Ready' then
		term.setTextColor(colors.blue)
	elseif current.status == 'Validating Disk' then
		term.setTextColor(colors.cyan)
	elseif current.status == 'Outputing Redstone!' then
		term.setTextColor(colors.green)
	elseif current.status == 'System Starting' then
		term.setTextColor(colors.red)
	else
		term.setTextColor(colors.white)
	end
	printer.centered(tostring(current.status), 7)
	term.setTextColor(1)
	printer.centered('Please Insert A Valid Keycard', 10)
	element.opacity(configBtn, true)
	if isSetup then printer.centered('Insert Valid Keycard To Enter Config', 19)
	elseif not isSetup then printer.centered(' ', 19) end
end
current.status = 'System Starting'
drawScreen()

function ejectDisk(argsEject, ejectDriveSide)
	LogFile.i("Eject Disk: "..tostring(argsEject), runningProgram)
	if argsEject then
		if argsEject == "-a" then
			disk.eject("top")
			disk.eject("bottom")
			disk.eject("left")
			disk.eject("right")
			disk.eject("front")
			disk.eject("back")
		else
			disk.eject(ejectDriveSide)
		end
	end
end

function checkConfig()
  LogFile.i('Config Login', runningProgram)
  ejectDisk("-a", nil)
  config = true
  term.clear()
  titleBar.draw('HbombOS Security Suite', 'Keycard Lock', colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Enter Your Administartor Password', 6)
  printer.centered('To Access Your Configuration Options', 7)
  local f = fs.open('systemFiles/Security/adminPass', 'r')
  adminPassFile = f.readLine()
  f.close()
  configText = 'Password: '
  term.setCursorPos(termX/2-#configText, 10)
  write(configText)
  configInput = read('*')
  if configInput == adminPassFile then configMenu() else printer.centered('Incorrect Password.. Returning', 19) sleep(0.5) isSetup = false return 'return' end
end

function configMenu()
LogFile.i('Config Menu Opened', runningProgram)
  titleBar.draw('HbombOS Security Suite', 'Keycard Lock Settings', colors.cyan, 256, 128, 256, 1)
  printer.centered('Pick An Option Below', 6)
  local continue = false
  local options = {
  	    {'Re Configure Lock', function()
          setup()
		end},
		{'Reset Configuration', function()
		  LogFile.i('Removing Config', runningProgram)
		  fs.delete('systemFiles/Programs/keycardConfig')
		  pressed = false
		  config = true
		  printer.centered('Removed!', 19)
		  sleep(1)
		  os.reboot()
		end},
		{'Cancel And Return', function()
		  isSetup = false
		  term.clear()
          return
		end}
	}
	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 6)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
		  options[selected][2]()
		  wait = false
		end
		draw()
	end
	return continue
end

function correctDisk()
	if not isSetup then
		ejectDisk('-s', current.settings.driveSide)
		rs.setOutput(current.settings.outputSide, true)
		stopTimer = os.startTimer(tonumber(current.settings.outputTime))
		printer.centered('Correct Keycard Entered', 19)
		current.status = 'Outputing Redstone!'
		drawScreen()
	elseif isSetup then
		element.opacity(configBtn, false)
		--Launch Setup Here
		checkConfig()
		isSetup = false
		current.status = 'System Ready'
		configBtn.toggleState = 1
		element.opacity(configBtn, false)
		drawScreen()
	end
end

function incorrectDisk()
	ejectDisk('-a', nil)
	printer.centered('Invalid Disk Entered!', 19)
	sleep(1)
	printer.centered('', 19)
end

function redstoneHandler()
	if current.settings.inputOption then
		if rs.getInput(current.settings.inputSide) then
			printer.centered('Redstone Signal Received', 19)
			rs.setOutput(current.settings.outputSide, true)
			stopTimer = os.startTimer(tonumber(current.settings.outputTime))
			current.status = 'Outputing Redstone!'
			drawScreen()
		end
	end
end

function timerHandler(event, timer)
	if timer == stopTimer then
		rs.setOutput(current.settings.outputSide, false)
		printer.centered('', 19)
		current.status = 'System Ready'
		drawScreen()
	end
end


local _, err = pcall(Initialise)
	if err then
		LogFile.e('Keycard Lock Crash: '..err, runningProgram)
		errora.err(err, 'Keycard Lock Crash, Umm, Something Went Splat!', true, true) --BSoD for protection, the 'true' is an auto-reboot option to prevent the door computer waiting for a prompt
	end