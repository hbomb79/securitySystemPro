os.pullEvent = os.pullEventRaw


current = {
Settings = {}
}

function save()
  term.clear()
  titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1)
  printer.centered("Thank You For Setting Up Your Reactor", 6)
  printer.centered("Management System", 7)
  printer.centered("Report Any Bugs On The Forum", 8)
  printer.centered("Please Wait While We Save Your Settings...", 18)
  SaveSettings()
  sleep(1)
  printer.centered('Your Settings Have Been Saved', 18)
  printer.centered('Click Anwhere To Reboot', 19)
  os.pullEvent('mouse_click')
  os.reboot()
end

_int = 1
_string = ""

termX, termY = term.getSize()

function readN(len, replaceChar)
  term.setTextColor(1)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        e,p1 = os.pullEvent()
		if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		  p1 = tonumber(p1)
		elseif type(p1) == type(_string) then
		  term.setTextColor(colors.red)
		  printer.centered("Only Numbers! You Entered: "..p1.." Of Type: "..type(p1), 19)
		  return nil
		end
        if e=="char" then
          if #input < len then
		    if type(p1) == type(_int) then
                input = input .. p1
                term.write(replaceChar or p1)
			end
          end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input
end

function waitForSetupKey()
	while true do
	  local event, arg = os.pullEvent()
	  if event == 'setupQue' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or arg == keys.rightAlt or arg == keys.s or arg == keys.f or arg == keys.c then
	  	return arg 
		end
	  end
	end
end

function welcome()
  titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1)
  printer.centered("Follow The Steps Ahead To Setup Your Reactor", 6)
  printer.centered("Management System", 7)
  printer.centered("Click Anywhere To Get Started", 19)
  os.pullEvent("mouse_click")
  return
end

function sideSetup()
rsWait = true
  while rsWait do
    term.clear()
    titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1) --Text, Subtext, Text Color, SubText Color, BG color, defaultbgcolor, defaultTextColor
    printer.centered("What Side Is The Reactor On?", 6)
    sideText = "Side: "
	term.setCursorPos(termX/2-#sideText, 10)
	write (sideText)
	local vside = false
    reactorSide = read()
      for k,v in pairs(rs.getSides()) do
		if v == reactorSide then
		  vside = true
		  rsWait = false
		  current.Settings.side = reactorSide
		  break
		end
	  end
	  if vside then break end
		printer.centered("Invalid Side", 11)
		sleep(0.5)
  end
  return
end

function loadSettings()
  if fs.exists('systemFiles/Programs/reactorConfig') then
  printer.centered('Config File Located', 19)
  sleep(0.5)
		local f = fs.open('systemFiles/Programs/reactorConfig', 'r')
		if f then
			current.Settings = textutils.unserialize(f.readAll())
		end
		f.close()
	else
	    printer.centered('Loading Setup', 19)
		sleep(0.5)
	    welcome()
		sideSetup()
		bufferShutSetup()
		bufferDownSetup()
		monitorOption()
		--if current.Settings.monitorUse then monitorSetup() end
		save()
	end
end

function SaveSettings()
	current.Settings = current.Settings or {}
	local f = fs.open('systemFiles/Programs/reactorConfig', 'w')
	if f then
		f.write(textutils.serialize(current.Settings))
	end
	f.close()	
end

function bufferShutSetup()
  waitingforAnswer = true
  while waitingforAnswer do
    sleep(0)
    term.clear()
    titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1)
      printer.centered("At What Amount Of RF Stored Do You Want", 5)
      printer.centered("The Reactor To Shutdown", 6)
    printer.centered("Maximum Amount Is 10,000,000RF", 8)
    bufferText = "RF AMOUNT: "
    term.setCursorPos(termX/2-#bufferText, 10)
	write(bufferText)
	bufferShutInput = readN(8)
	if bufferShutInput == nil or bufferShutInput == "" then
	  printer.centered("Cannot Be A Nil Value Or String!", 19)
	  sleep(1)
	else
	  bufferShutInput = tonumber(bufferShutInput)
	  if bufferShutInput > 10000000 then printer.centered("Maximum Amount Is 10,000,000RF!", 19) sleep(1)
	  elseif bufferShutInput == 0 then printer.centered("Must Not Be NIL", 19) sleep(1) else waitingforAnswer = false current.Settings.shutDownBuffer = bufferShutInput break end
	end
  end
  --bufferDownSetup()
  return
end

function bufferDownSetup()
  _2 = true
    while _2 do
	  sleep(0)
	  term.clear()
	  titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1)
      printer.centered("At What Amount Of RF Stored Do You Want", 5)
      printer.centered("The Reactor To Decrease Power Output", 6)
	  printer.centered("Maximum Is Shutdown Amount: "..tostring(bufferShutInput), 8)
	  bufferText = "RF AMOUNT: "
	  term.setCursorPos(termX/2-#bufferText, 10)
	  write(bufferText)
	  bufferDownInput = readN(8)
	    if bufferDownInput == nil or bufferDownInput == "" then  
		  printer.centered("Cannot Be A Nil Value!", 19)
		  sleep(1)
		else
		  bufferDownInput = tonumber(bufferDownInput)
		  if bufferDownInput >= bufferShutInput then printer.centered("Max Amount Is: "..bufferShutInput.."!", 19) sleep(1)
	      elseif bufferDownInput == 0 then printer.centered("Cannot Be Nil!", 19) sleep(1) else _2 = false current.Settings.turnDownBuffer = bufferDownInput break end
		end
	end
	return
end

--[[function monitorSetup()
sleep(0)
while true do
  titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1)
  printer.centered('Please Select The Side That The', 6)
  printer.centered('Monitor Is Connected Either', 7)
  printer.centered('Directly Or Via Cable', 8)
  sideText = "Side: "
	term.setCursorPos(termX/2-#sideText, 10)
	write (sideText)
	local vside = false
    monSide = read()
      for k,v in pairs(rs.getSides()) do
		if v == monSide then
		  vside = true
		  rsWait = false
		  current.Settings.monitorSide = monSide
		  break
		end
	  end
	  if vside then break end
		printer.centered("Invalid Side", 11)
		sleep(0.5)
  end
  return
end]]--

function monitorOption()
  titleBar.draw("HbombOS Security Suite", "Reactor Management Setup", colors.cyan, 256, 128, 256, 1)
  printer.centered('Would You Like The Computer To Display', 5)
  printer.centered('Information On A Monitor As Well', 6)
  printer.centered('Press Y To Accept, Or N To Decline', 8)
    while true do
	  event, key = os.pullEvent('key')
		  if key == keys.y then
		    current.Settings.monitorUse = true
			break
		  elseif key == keys.n then
		    current.Settings.monitorUse = false
			break
		  end
	end
	return
end

function removeConfig()
local function removeSet()
  term.clear()
  titleBar.draw("HbombOS Security Suite", "Reactor Management", colors.cyan, 256, 128, 256, 1)
  printer.centered("Type in your administrator password", 4)
  printer.centered("To reset the reactor configuration", 5)
  local f = fs.open("systemFiles/Security/adminPass", "r")
  adminPassword = f.readLine()
  f.close()
  configText = "Admin Password: "
  term.setCursorPos(termX/2-#configText, 7)
  write(configText)
  adminPasswordInput = read("*")
  if adminPasswordInput == adminPassword then
    return true
  else
    return false
  end
end

if removeSet() then
  printer.centered("Removing Configuration File", 19)
  sleep(0)
  fs.delete('systemFiles/Programs/reactorConfig')
  printer.centered("Removed Config", 19)
  sleep(1)
  os.reboot()
else return end
end

function checkreactorStatus()
  
end

function obtainMonitorDetails()
 
end


function Start()
 keyrunning = true
  while keyrunning do
    local key = nil
    local success = false
    parallel.waitForAll(function()success = main() os.queueEvent('setupQue') end, function() key = waitForSetupKey() end)
	  if success and key == keys.leftAlt or key == keys.rightAlt then
        success = removeConfig()
	  elseif success and key == keys.s then
	    success = reactorSet()
	  elseif success and key == keys.f then
	    success = reactorUnset()
	  elseif success and key == keys.c then
	    success = reactorControl()
	  end
	    return success
  end  
end

function reactorControl()
while true do
  term.clear()
  titleBar.draw("HbombOS Security Suite", "Reactor Management", colors.cyan, 256, 128, 256, 1)
  printer.centered("New Control Rod Level", 4)
  printer.centered("0-100 %", 5)
  printer.centered("Max-Min", 6)
  levelText = "Percent: "
  term.setCursorPos(termX/2-#levelText, 8)
  write(levelText)
  levelinput = readN(3)
  levelinput = tonumber(levelinput)
if levelinput then
  if levelinput > 100 then printer.centered("Max Is 100%", 19) sleep(0.5)
  elseif levelinput == "" then printer.centered("Cannot Be Nil", 19) sleep(0.5)
  elseif levelinput == nil then printer.centered("Cannot Be NIL", 19) sleep(0.5)
  else
    printer.centered("Adjusting Control Rod Levels", 19)
	sleep(0)
	reactor.setAllControlRodLevels(levelinput)
	printer.centered("Adjusted!", 19)
	break
  end
end
end
return
end

function checkEnergy()
if manOverride then
  printer.centered("Manual Override Engaged, Reactor Is: "..tostring(state), 19)
else
if energyStore ~= nil then
  Display.setBackgroundColor(256)
  if tonumber(energyStore) >= tonumber(current.Settings.shutDownBuffer) then 
    term.setTextColor(colors.blue)
	Display.setTextColor(colors.blue)
    printer.centered("Reached Shutdown Buffer, Turning Off!", 19)
	if monPresent then MonWrite('Buffer Reached', monY) end
	term.setTextColor(1)
	--Display.setTextColor(1)
    reactor.setActive(false)
  elseif energyStore >= tonumber(current.Settings.turnDownBuffer) and tonumber(energyStore) < tonumber(current.Settings.shutDownBuffer) then 
    reactor.setAllControlRodLevels(50)
	term.setTextColor(colors.yellow)
	Display.setTextColor(colors.yellow)
	printer.centered("Fuel Rods At 50% Run!", 19)
	if monPresent then MonWrite('50% Active', monY) end
	term.setTextColor(1)
	--Display.setTextColor(1)
    reactor.setActive(true)
  else 
    reactor.setActive(true) 
    reactor.setAllControlRodLevels(0)
	term.setTextColor(colors.red)
	Display.setTextColor(colors.red)
	printer.centered("Running Reactor At Max Power!", 19)
	if monPresent then MonWrite('Max Power', monY) end
	term.setTextColor(1)
	--Display.setTextColor(1)
  end
  Display.setTextColor(1)
else
  printer.centered("Energy stored is Nil", 19)
end
end
end

function main()
term.clear()
titleBar.draw("HbombOS Security Suite", "Reactor Management", colors.cyan, 256, 128, 256, 1)
term.setTextColor(128)
printer.centered("Reactor Information", 4)
term.setTextColor(1)
keyrunning = true
running = true
 -- while running do
	  reactor = peripheral.wrap(current.Settings.side)
	  if not checkReactorError() then
	  --if not reactor.getConnected() then
	    errora.err("Reactor", "No Reactor Can Be Found On Side: "..current.Settings.side)
	  else
	    state = reactor.getActive()
	    fuelAmount = reactor.getFuelAmount()
		wasteAmount = reactor.getWasteAmount()
		energy = reactor.getEnergyProducedLastTick()
		temp = reactor.getFuelTemperature()
		energyStore = reactor.getEnergyStored()
		rods = reactor.getNumberOfControlRods()
		eProduce = reactor.getEnergyProducedLastTick()
		checkEnergy()
		printer.centered("Energy Currently Stored: "..tostring(energyStore), 6)
		printer.centered("Energy Per Tick: "..tostring(eProduce), 8)
		printer.centered("Current Amount Of Fuel Rods: "..tostring(rods), 10)
		if fuelAmount < 10000 then term.setTextColor(colors.yellow) elseif fuelAmount <5000 then term.setTextColor(colors.red) else term.setTextColor(1) end
		printer.centered("Fuel Amount: "..tostring(fuelAmount), 11)
		if wasteAmount > 500 and wasteAmount <1000 then term.setTextColor(colors.yellow) elseif wasteAmount > 1000 then term.setTextColor(colors.red) else term.setTextColor(1) end
		printer.centered("Waste Amount: "..tostring(wasteAmount), 12)
		if temp > 1000 and temp <1500 then term.setTextColor(colors.yellow) elseif temp > 1500 then term.setTextColor(colors.red) else term.setTextColor(1) end
		printer.centered("Core Temperature "..tostring(temp).."C", 13)
		term.setTextColor(1)
		term.setCursorPos(termX-#tostring(state), 1)
		term.setBackgroundColor(128)
		if state == false then term.setTextColor(colors.red) elseif state == true then term.setTextColor(colors.lime) end
		write(tostring(state))
		term.setTextColor(1)
		term.setBackgroundColor(256)
		printer.centered("Hold S To Change Modes, F To Return To Auto", 16)
		printer.centered("C To Change Reactor Control Rod Levels", 17)
		if monPresent then monInfo() end
		return true
	  end
end

function checkReactorStatement()
  reactor = peripheral.wrap(current.Settings.side)
  reactor.getConnected()
end

function checkReactorError()
  ok, err = pcall(checkReactorStatement)
  if not ok then
	errora.err(err, "There Might Not Be A Rector On Side: "..current.Settings.side)
  else
    return true
  end
end


function reactorSet()
  manOverride = true
  if reactor.getActive() then reactor.setActive(false) else reactor.setActive(true) end
  sleep(0.5)
end

function reactorUnset()
  manOverride = false
  sleep(0.5)
end

function monInfo()
  Display.setTextColor(1)
  Display.setBackgroundColor(256)
  MonWrite("Energy Stored: "..tostring(energyStore), 3)
  MonWrite("RF Per Tick: "..tostring(eProduce), 4)
  if fuelAmount <= 10000 then Display.setTextColor(colors.yellow) elseif fuelAmount <=5000 then Display.setTextColor(colors.red) else Display.setTextColor(colors.white) end
  MonWrite("Fuel: "..tostring(fuelAmount), 6)
  if wasteAmount >= 500 and wasteAmount <=1000 then Display.setTextColor(colors.yellow) elseif wasteAmount > 1000 then Display.setTextColor(colors.red) else Display.setTextColor(colors.white) end
  MonWrite("Waste Amount: "..tostring(wasteAmount), 7)
  if temp >= 1000 and temp <=1500 then Display.setTextColor(colors.yellow) elseif temp > 1500 then Display.setTextColor(colors.red) else Display.setTextColor(colors.white) end
  MonWrite("Core Temp "..tostring(temp).."C", 8)
  
end

function monTitleBar()
  Display.setCursorPos(1,1)
  Display.setBackgroundColor(128)
  Display.clearLine()
  Display.setTextColor(colors.cyan)
  Display.write('HbombOS Suite')  
  Display.setCursorPos(monX-#tostring(state), 1)  
  if state == true then Display.setTextColor(colors.lime) else Display.setTextColor(colors.red) end
  Display.write(tostring(state))
  term.setBackgroundColor(256)
  term.setTextColor(1)
end

function monInit()
  monX, monY = Display.getSize()
  if monX >= 29 and monY >= 12 then
    Display.clear()
	Display.setBackgroundColor(256)
  else
    Display.setTextScale(0.5)
    Display.setBackgroundColor(colors.red)  
    Display.clear()
    Display.setCursorPos(1,1)
    Display.write('Monitor Too SMALL!')
  end
end

function MonWrite(text, y)
	local w, h = Display.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    Display.setCursorPos(x, y)
	Display.clearLine()
    Display.write(text)
end

function init()
  term.clear()
  titleBar.draw("HbombOS Security Suite", "Reactor Management", colors.cyan, 256, 128, 256, 1)
  printer.centered("Looking For Config File", 19)
  sleep(0)
  loadSettings()
  printer.centered('Config Loaded', 19)
  if current.Settings.monitorUse then printer.centered('Connecting To Monitor', 19) sleep(0.1)
    printer.centered('Searching For Wired Modem Or Monitor', 19)
	sleep(0.1)
	peripheralList = peripheral.getNames()
	for i = 1, #peripheralList do
	  if peripheral.getType(peripheralList[i]) == 'monitor' then
	    printer.centered('Monitor Detected On: '..peripheralList[i], 19)
		monPresent = true
		Display = peripheral.find('monitor')
		monX, monY = Display.getSize()
		Display.clear()
		Display.setCursorPos(1, 1)
		MonWrite('Monitor Found!', 1)
		sleep(0)
		MonWrite('Scanning Monitor', 2)
		sleep(0)
		MonWrite('Monitor Size Follows...', 3)
		MonWrite('X: '..monX..'Y: '..monY, 3)
		sleep(0)
		MonWrite('Adjusting Screen...', 4)
		sleep(0)
		MonWrite('Please Wait', 4)
		monInit()
		return
	  end
	end
	monPresent = false
	printer.centered('No Monitor Detected!', 19)
	sleep(0)
	return
  end
end

function loop()
Display.clear()
  while true do
    sleep(0)
	monTitleBar()
    Start()
  end
end

init()
local _, err = pcall(loop) --Error Catching, All Functions Are Called From initialise() at some point...
  if err then
    term.setCursorBlink(false)
	errora.err(err, 'Uh Oh, Please Report The Error Code Above', true) --BSoD for protection, the 'true' is an auto-reboot option to prevent the door waiting for a prompt
  end  
