current = {
  settings = {},
  reactor = {}
  }
Events={}
current.monitorPresent = false
current.page = 'Main'
termX, termY = term.getSize()
current.reactor.manualMode = false

--Definitions
_int = 1
_string = 'a'

function readN(len, replaceChar)
  term.setTextColor(1)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        e,p1 = os.pullEvent()
		if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		  p1 = tonumber(p1)
		elseif type(p1) == type(_string) then
		  term.setTextColor(colors.red)
		  term.setCursorBlink(false)
		  printer.centered("Only Numbers! You Entered: "..p1.." Of Type: "..type(p1), 19)
		  sleep(1)		  
		  term.setCursorBlink(true)
		  return false
		end
        if e=="char" then
          if #input < len then
		    if type(p1) == type(_int) then
                input = input .. p1
                term.write(replaceChar or p1)
			end
          end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input
end

function SettingsEdit()
  local function setupOverlay()
    titleBar.draw('HbombOS Security Suite', 'Reactor Setup', colors.cyan, 256, 128, 256, 1)
  end
  
  local function setupWelcome()
    setupOverlay()
	printer.centered('Welcome To Reactor Management Setup', 6)
	printer.centered('This Program Is Used To Monitor Passively Cooled', 8)
	printer.centered('Reactors From The BigReactors Mod', 9)
	printer.centered('Connect A Reactor Computer Port To This', 10)
	printer.centered('Computer And The Computer Will Find It For You', 11)
	printer.centered('Click Anywhere To Begin Setup', 19)
	os.pullEvent('mouse_click')
  end
  
  local function shutdownSetup()
    while true do
      setupOverlay()
	  printer.centered('For Increased Control, You Get To Pick', 6)
	  printer.centered('What Amount Of RF Has To Be Stored In The', 7)
	  printer.centered('Reactor When We Shut It Down, If The Stored', 8)
	  printer.centered('Power Drops Below This Amount, The Reactor', 9)
	  printer.centered('Will Re-Activate', 10)
	  printer.centered('The Max Amount Is 10000000', 19)
	  term.setCursorPos(termX/2-#'Buffer: ', 12)
	  write'Buffer: '
	  local input = readN(8)
	    if input and input ~= '' then
		 if tonumber(input) > 10000000 then
		   term.setTextColor(colors.red)
		   term.setCursorBlink(false)
		   printer.centered('The Max Amount Is 10000000', 19)
		   sleep(1)
		   term.setTextColor(1)
		   term.setCursorBlink(true)
		 else
	       current.settings.shutdownBuffer = tonumber(input)
		   break
		 end
		else
		  term.setTextColor(colors.red)
		  term.setCursorBlink(false)
	      printer.centered('Cannot Be Nil!', 19)
		  sleep(1)
		  term.setCursorBlink(true)
		  term.setTextColor(1)
	    end
    end
  end
  
  local function turndownSetup()
    while true do
      setupOverlay()
	  printer.centered('For Increased Control, You Get To Pick', 6)
	  printer.centered('What Amount Of RF Has To Be Stored In The', 7)
	  printer.centered('Reactor When We Turn It Down, If The Stored', 8)
	  printer.centered('Power Drops Below This Amount, The Reactor', 9)
	  printer.centered('Will Run At Max Power Until Buffer Reached Again', 10)
	  printer.centered('The Max Amount Is: '..current.settings.shutdownBuffer-1, 19)
	  term.setCursorPos(termX/2-#'Buffer: ', 12)
	  write'Buffer: '
	  local input = readN(8)
	    if input and input ~= '' then
		 if tonumber(input) > current.settings.shutdownBuffer-1 then
		   term.setTextColor(colors.red)
		   term.setCursorBlink(false)
		   printer.centered('The Max Amount Is: '..current.settings.shutdownBuffer-1, 19)
		   sleep(1)
		   term.setTextColor(1)
		   term.setCursorBlink(true)
		 else
	       current.settings.turndownBuffer = tonumber(input)
		   break
		 end
		else
		  term.setTextColor(colors.red)
		  term.setCursorBlink(false)
	      printer.centered('Cannot Be Nil!', 19)
		  sleep(1)
		  term.setCursorBlink(true)
		  term.setTextColor(1)
	    end
    end
  end
  
  local function setupComplete()
    setupOverlay()
    printer.centered('Setup Is Now Complete, Thank You', 6)
	printer.centered('Please Wait While The System Saves Your Settings', 8)
	printer.centered('So You Can Be Sure The System Keeps Your', 9)
	printer.centered('Reactor Safe', 10)
	printer.centered('Saving Settings To File', 19)
	sleep(1)
	SaveSettings()
	printer.centered('Settings Saved, Click Anwhere To Reboot', 19)
	os.pullEvent('mouse_click')
	os.reboot()
  end

setupWelcome()
shutdownSetup()
turndownSetup()
setupComplete()
end

function overlay()
  titleBar.draw('HbombOS Security Suite', 'Reactor Management', colors.cyan, 256, 128, 256, 1)
end

function monitorOverlay()
  
end

function SaveSettings()
	current.settings = current.settings or {}
	local f = fs.open('systemFiles/Programs/reactorConfig', 'w')
	if f then
		f.write(textutils.serialize(current.settings))
	end
	f.close()	
end

function loadSettings()
  if fs.exists('systemFiles/Programs/reactorConfig') then
		local f = fs.open('systemFiles/Programs/reactorConfig', 'r')
		if f then
			current.settings = textutils.unserialize(f.readAll())
		end
		f.close()
	else
		SettingsEdit()
	end
end

function monitorPrepare()
  Display.setTextScale(1)
  Display.setBackgroundColor(256)
  Display.clear()
  Display.setCursorPos(1,1)
  Display.setBackgroundColor(128)
  Display.clearLine()
  Display.setTextColor(colors.cyan)
  Display.write('HbombOS Suite')
  Display.setBackgroundColor(256)
  Display.setTextColor(1)
end

function monitorTitle()
  Display.setCursorPos(1,1)
  Display.setBackgroundColor(128)
  Display.clearLine()
  Display.setTextColor(colors.cyan)
  Display.write('HbombOS Suite')
  Display.setBackgroundColor(256)
  Display.setTextColor(1)
end

function findMonitor()
  localPeripherals = peripheral.getNames()
    for i = 1, #localPeripherals do
	  if peripheral.getType(localPeripherals[i]) == 'monitor' then
		Display = peripheral.find('monitor')
		monX, monY = Display.getSize()
		if monX >= 29 and monY>= 12 then
		  current.monitorPresent = true
		  monitorPrepare()
		else
		  current.monitorPresent = false
		  Display.setTextScale(0.5)		  
		  Display.write('Too Small')
		end
		return true
	  end
	end
	return false
end

--Big reactor peripheral name: BigReactors-Reactor

function checkReactor()
  if react.getConnected() then
    state = react.getActive()
	rfStored = react.getEnergyStored()
	rfPerTick = react.getEnergyProducedLastTick()
	coreTemp = react.getFuelTemperature()
	fuelAmount = react.getFuelAmount()
	wasteAmount = react.getWasteAmount()
	controlRodAmount = react.getNumberOfControlRods()
  else
    scanReactor()
  end
end


function statusPrint()
  overlay()
  current.page = 'Main'
  checkReactor()
  printer.centered('[S] To Toggle Reactor', 13)
  printer.centered('[F] To Toggle Auto Mode', 14)
  printer.centered('[C] To Adjust Control Rods', 15)
  printer.centered('[ALT] To Change Settings', 16)
  term.setCursorPos(termX-#tostring(state), 1)
  term.setBackgroundColor(128)
  if state then term.setTextColor(colors.lime) elseif not state then term.setTextColor(colors.red) else term.setTextColor(1) end
  write(tostring(state))
  term.setTextColor(1)
  term.setBackgroundColor(256)
  printer.centered('Energy Stored: '..rfStored, 4)
  printer.centered('Energy Last Tick: '..rfPerTick, 6)
  if tonumber(coreTemp) > 1000 and tonumber(coreTemp) < 1500 then term.setTextColor(colors.yellow) elseif tonumber(coreTemp) >1500 then term.setTextColor(colors.red) else term.setTextColor(1) end
  printer.centered('Core Temp: '..coreTemp, 8)
  if tonumber(fuelAmount) < 5000 and tonumber(fuelAmount) > 2500 then term.setTextColor(colors.yellow) elseif tonumber(fuelAmount) < 2500 then term.setTextColor(colors.red) else term.setTextColor(1) end
  printer.centered('Fuel Amount: '..fuelAmount, 9)
  if tonumber(wasteAmount) >= 500 and tonumber(wasteAmount) < 1000 then term.setTextColor(colors.yellow) elseif tonumber(wasteAmount) >= 1000 then term.setTextColor(colors.red) else term.setTextColor(1) end
  printer.centered('Waste Amount: '..wasteAmount, 10)
  term.setTextColor(1)
  printer.centered('Active Control Rods: '..controlRodAmount, 11)
  if current.monitorPresent == true then monStatusPrint() end
  if current.reactor.manualMode == false then autoControl() end
  if current.reactor.manualMode == true then term.setTextColor(colors.orange) printer.centered('Manual Mode Engaged', 19) end
  if current.reactor.manualMode == true and current.monitorPresent then Display.setTextColor(colors.orange) MonWrite('Manual Mode Engaged', monY) Display.setTextColor(1) end
  term.setTextColor(1)
  statusRefresh = os.startTimer(0.1)
end

function monStatusPrint()
  monitorTitle()
  if current.page == 'Main' then
  Display.setCursorPos(monX-#tostring(state), 1)
  Display.setBackgroundColor(128)
  if state then Display.setTextColor(colors.lime) elseif not state then Display.setTextColor(colors.red) else Display.setTextColor(1) end
  Display.write(tostring(state))
  Display.setTextColor(1)
  Display.setBackgroundColor(256)
  MonWrite('Energy Stored: '..rfStored, monY/2-3)
  MonWrite('Energy Last Tick: '..rfPerTick, monY/2-1)
  if tonumber(coreTemp) > 1000 and tonumber(coreTemp) < 1500 then Display.setTextColor(colors.yellow) elseif tonumber(coreTemp) >1500 then Display.setTextColor(colors.red) else Display.setTextColor(1) end
  MonWrite('Core Temp: '..coreTemp, monY/2+1)
  if tonumber(fuelAmount) < 5000 and tonumber(fuelAmount) > 2500 then Display.setTextColor(colors.yellow) elseif tonumber(fuelAmount) < 2500 then Display.setTextColor(colors.red) else Display.setTextColor(1) end
  MonWrite('Fuel Amount: '..fuelAmount, monY/2+2)
  if tonumber(wasteAmount) >= 500 and tonumber(wasteAmount) < 1000 then Display.setTextColor(colors.yellow) elseif tonumber(wasteAmount) >= 1000 then Display.setTextColor(colors.red) else Display.setTextColor(1) end
  MonWrite('Waste Amount: '..wasteAmount, monY/2+3)
  Display.setTextColor(colors.cyan)
  MonWrite('Auto Toggle', monY-1)
  Display.setTextColor(1)
  elseif current.page == 'Control Rod' then
    monitorPrepare()
	MonWrite('Terminal In', 4)
	MonWrite('Control Rod Settings', 5)
  elseif current.page == 'Reactor Error' then
    monitorPrepare()
	MonWrite('Terminal Error', 4)
	MonWrite('No Reactor Connected', 5)
  end
end

function MonWrite(text, y)
	local w, h = Display.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    Display.setCursorPos(x, y)
	Display.clearLine()
    Display.write(text)
end

function setControlRods()
sleep(0)
while true do
  current.page = 'Control Rod'
  if current.monitorPresent == true then monStatusPrint() end
  overlay()
  printer.centered('Please Type Your Custom Control Rod Setting', 6)
  printer.centered('If The Reactor Is In Auto Mode', 7)
  printer.centered('This Settings Will Be Changed Back', 8)
  printer.centered('Straight Away, Change The Reactor To Manual', 9)
  printer.centered('To Prevent This', 10)  
  printer.centered('0% - 100%', 19)
  term.setCursorPos(termX/2-#'Percent: ', 12)  
  write'Percent: '
  local input = readN(3)
  if input ~= "" and input then
    if tonumber(input) >100 or tonumber(input) < 0 then term.setTextColor(colors.red) printer.centered('0% - 100%', 19) sleep(0.5) term.setTextColor(1)
	elseif tonumber(input) then react.setAllControlRodLevels(tonumber(input)) return else error'Unknown Exception Occured While Changing Values' end
  end
end
end

function autoToggle()
  if current.reactor.manualMode == false then
    current.reactor.manualMode = true
  elseif current.reactor.manualMode == true then
    current.reactor.manualMode = false
  end
end

function keyHandler(event, key)
  if key == keys.s then
    current.reactor.manualMode = true
    if react.getActive() == true then react.setActive(false) current.reactor.active = false elseif react.getActive() == false then react.setActive(true) current.reactor.active = true else error'Unknown Reactor State' end
  elseif key == keys.f then
    autoToggle()
  elseif key == keys.c then
    setControlRods()
  elseif key == keys.leftAlt or key == keys.rightAlt then
    ConfigLogin()
  end
  term.clear()
  overlay()
  if current.monitorPresent == true then monitorPrepare() end
  statusPrint()
end

function autoControl()
  if not current.reactor.manualMode then
    if rfStored < current.settings.turndownBuffer then
	  if not react.getActive then react.setActive(true) end
	  react.setAllControlRodLevels(0)
	  react.setActive(true)
	  term.setTextColor(colors.red)
	  printer.centered('Running At Maximum Power', 19)
	  if current.monitorPresent == true then Display.setTextColor(colors.red) MonWrite('Full Power', monY) end
	elseif rfStored > current.settings.turndownBuffer and rfStored < current.settings.shutdownBuffer then
      if not react.getActive then react.setActive(true) end
	  react.setAllControlRodLevels(50)
	  react.setActive(true)
	  term.setTextColor(colors.yellow)
	  printer.centered('Running At Half Power', 19)
	  if current.monitorPresent == true then Display.setTextColor(colors.yellow) MonWrite('Half Power', monY) end
	elseif rfStored > current.settings.shutdownBuffer then
	  react.setAllControlRodLevels(100)
	  react.setActive(false)
	  term.setTextColor(colors.blue)
	  printer.centered('Buffer Reached, Shutdown', 19)
	  if current.monitorPresent == true then Display.setTextColor(colors.blue) MonWrite('Shutdown', monY) end
	end
	term.setTextColor(1)
	if current.monitorPresent == true then Display.setTextColor(1) end
  end
end

function reactorError()
  current.page = 'Reactor Error'
  if current.monitorPresent == true then monStatusPrint() end
  if current.reactor.present == false then
    overlay()
	printer.centered('There Is No Reactor Connected To This Computer', 6)
	printer.centered('Please Attach Reactor Port To This Computer', 8)
	printer.centered('If The Computer Doesnt Automatically Re-Scan', 9)
	printer.centered('Then Reboot The Computer By Holding CTRL+R', 10)
	printer.centered('Add Computer Port... Then Wait While Searching', 19)
  elseif current.reactor.present== true then
    if current.reactor.built == false then
      overlay()
	  printer.centered('It Appears The Reactor Connected To This Computer', 6)
	  printer.centered('Is Not Completly Built, Please Finish The Mulit Block', 7)
	  printer.centered('If The Computer Doesnt Automatically Scan', 8)
	  printer.centered('Then Reboot The PC By Holding CTRL+R', 19)
	end
  else
    error('Unknown Reactor Error Thrown')
  end
  os.pullEventRaw('peripheral')
  printer.centered('Searching For Reactor Computer Port...', 19)
  sleep(1)
  scanReactor()
  overlay()
  if current.monitorPresent == true then monStatusPrint() end
  statusPrint()
end

function scanReactor()
  localPeri = peripheral.getNames()
  for i = 1, #localPeri do
    if peripheral.getType(localPeri[i]) == 'BigReactors-Reactor' then
	  current.reactor.present = true
	  react = peripheral.find('BigReactors-Reactor')
	  if react.getConnected() then
	    current.reactor.built = true
		return true
	  else
	    current.reactor.built = false
		reactorError()
	  end
	end
  end
  current.reactor.present = false
  reactorError()
end

function scanDevices()
findMonitor()
scanReactor()
end

function monTouch(event,side, x, y)
--error(event..' x: '..x..' y: '..y)
  if x >= monX-5 and y == 1 then
     current.reactor.manualMode = true
     if react.getActive() == true then react.setActive(false) current.reactor.active = false elseif react.getActive() == false then react.setActive(true) current.reactor.active = true else error'Unknown Reactor State' end
  elseif y == monY-1 then
    autoToggle()
  end
end

function Initialise()
  overlay()
  loadSettings()
  eventRegister('key', keyHandler)
  eventRegister('timer', timerHandler)
  eventRegister('terminate', function(event) errora.err('Malicious Activity Detected', 'You Attempted To Terminate The Software!', true) end)
  eventRegister('monitor_resize', findMonitor)
  eventRegister('peripheral', scanDevices)
  eventRegister('peripheral_detach', scanDevices)
  eventRegister('monitor_touch', monTouch)
  scanReactor()
  findMonitor()
  programEventLoop()
end

function timerHandler(event, timerName)
  if timerName == statusRefresh then statusPrint() end
end

function ConfigLogin()
  
end

function configMenu()
  titleBar.draw('HbombOS Security Suite', 'Reactor Settings', colors.cyan, 256, 128, 256, 1)
  printer.centered('Pick An Option Below', 6)
  local continue = false
  local options = {
		{'Edit Settings', function() 
		  SettingsEdit()
		end}, 
		{'Reset Configuration', function()
		  fs.delete('systemFiles/Programs/reactorConfig')
		  pressed = false
		  config = true
		  printer.centered('Removed!', 19)
		  sleep(1)
		  os.reboot()
		end},
		{'Cancel And Return', function()
          return
		end}
	}
	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = 256
			local tc = colours.white
			if i == selected then
				bg = 256
				tc = colours.blue
			end
			term.setTextColor(tc)
			term.setBackgroundColor(bg)
			PrintCentered(' '..v[1]..' ', math.floor(#options/2) + i + 6)
		end
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
		  options[selected][2]()
		  wait = false
		  break
		end
		draw()
	end
	return continue
end

function eventRegister(event, functionToRun)
	if not Events[event] then
		Events[event] = {}
	end
	table.insert(Events[event], functionToRun)
end

function programEventLoop()
statusPrint()
  while true do
	local event, arg1, arg2, arg3, arg4, arg5, arg6 = os.pullEventRaw()
	  if Events[event] then
		for i, e in ipairs(Events[event]) do
		  e(event, arg1, arg2, arg3, arg4, arg5, arg6)
		end
      end
   end
end

local _, err = pcall(Initialise)
  if err then
    term.setCursorBlink(false)
	errora.err(err, 'The Reactor Program Has Crashed, Error Code Above', true)
  end
os.reboot()