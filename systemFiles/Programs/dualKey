--os.pullEvent = os.pullEventRaw
termX, termY = term.getSize()

text1 = "Username:"
text2 = "Password:"

setup = false
-----------------
--API FUNCTIONS--
-----------------

function RSinSetup()
 while true do
  term.clear()
  drawTitleBar()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up PIN Lock", 8)
  printer.centered("Would You Like The Computer To Act As If",10)
  printer.centered("The Password was Entered If It Receives A",11)
  printer.centered("Redstone Signal On The Designated Side?",12)
  printer.centered("Y/N",12)
  printer.centered("You May Pick Which Side New Step",19)
  ev, arg = os.pullEvent()
   if ev == "key" then
	if arg == keys.y then
	  rsInSetting = true
	  break
	elseif arg == keys.n then
	  rsInSetting = false
	  break
	end
   end
  end
  return
end

function RSinSideSetup()
  while true do
    printer.centered("It Appears You Have Not Used This Program Before", 6)
    printer.centered("Setting Up PIN Lock", 8)
    printer.centered("You Picked That You Would Like The Computer",10)
    printer.centered("To Respond To Redstone As If The Password",11)
    printer.centered("Was Entered, What Side Do You Want The Input",12)
    printer.centered("To Have To Come From?",13)
	rsTextin = "InputSide: "
	term.setCursorPos(termX/2-(#rsTextin), 15)
	  write (rsTextin)
	  local vside = false
		rsInputSide = read()
		for k,v in pairs(rs.getSides()) do
			if v == rsInputSide then
				vside = true
				break
			end
		end
		if vside then break end
		  print("Invalid side!")
		  sleep(0.5)
		  term.clear()
		end
	 return true
  end 



x, y = term.getSize()
local function readN(len, replaceChar)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  if not setup then
    checkKey()
    term.setTextColor(colors.black)
  else
    term.setTextColor(1)
  end
  repeat
        local e,p1 = os.pullEvent()
        if e=="char" then
          if #input < len then
                input = input .. p1
                term.write(replaceChar or p1)
          end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input
end


function PrintCentered(text, y) --Swapped Out But Still Using Old One As It Does The Job It Does Well:P
	local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
	term.clearLine()
    write(text)
end

function drawTitleBar()
  titleBar.draw("HbombOS Security Suite", "Digital Lock", colors.cyan, 256, 128, 256, 1)
  term.setBackgroundColor(256)
  printer.centered("HbombOS Security Suite", 4)
  printer.centered("Running DualKey Digital Lock", 5)
end

function drawUserField()
  drawPassField()
  term.setTextColor(1)
  term.setBackgroundColor(256)
  paintutils.drawLine(termX/2-2, 8, termX/2+13, 8, colors.white)
  term.setCursorPos(termX/2-(#text1+2), 8)
  term.setBackgroundColor(256)
  write(text1)
  term.setBackgroundColor(256)
  paintutils.drawLine(termX/2-2, 8, termX/2+13, 8, colors.white)
  term.setTextColor(colors.black)
end

function drawPassField()
  term.setTextColor(1)
  term.setBackgroundColor(256)
  paintutils.drawLine(termX/2-2, 11, termX/2+13, 11, colors.white)
  term.setCursorPos(termX/2-(#text2+2), 11)
  term.setBackgroundColor(256)
  write(text2)
  paintutils.drawLine(termX/2-2, 11, termX/2+13, 11, colors.white)
  term.setTextColor(colors.black)
end

function getUsername()
  term.setTextColor(colors.black)
  drawUserField()
  term.setCursorPos(termX/2-2, 8)
  inputUsername = readN(15)
  return inputUsername
end

function getPassword()
  term.setTextColor(colors.black)
  drawPassField()
  term.setCursorPos(termX/2-2, 11)
  inputPassword = readN(15, "*")
  return inputPassword
end

--------------------
--SYSTEM FUNCTIONS--
--------------------

function checkLoginUser()
  drawPassField()
  drawTitleBar()
  checkingUser = true
  while checkingUser do
	if getUsername() == username then
	  term.setBackgroundColor(256)
	  term.setTextColor(1)
	  if checkLoginPass() then
	  return true
	  end
	end
  end
end

function checkLoginPass()
  checkingPass = true
    while checkingPass do
	 drawPassField()
	  if getPassword() == password then
	    term.setBackgroundColor(256)
	    term.setTextColor(1)
        return true
	  end
	end
end

function open()
 rs.setOutput(side, true)
  for i=timeSide, 0, -1 do
    printer.centered("Depowering Redstone In: "..i, 13)
	sleep(1)
	if i <= 0 then rs.setOutput(side, false) sleep(0) shell.run"systemFiles/Programs/dualKey" end
  end
end

function fileCheck()
  if not fs.exists('systemFiles/Programs/dualKeyConfig') then	
    waitinput = true
      while waitinput do
        term.clear()
		setup = true
        printer.centered("It Appears You Have Not Used This Program Before", 6)
        printer.centered("Setting Up Digital Lock", 8)
        printer.centered("Enter Your Username Below", 10)
        setUsername()
	   end
  else --The File Exists...
    setup = false
    term.clear()
	term.setTextColor(1)
    local f = fs.open ('systemFiles/Programs/dualKeyConfig', "r")
	username = f.readLine()
	password = f.readLine()
	side = f.readLine()
	timeSide = f.readLine()
	rsSettingUse = f.readLine()
	if rsSettingUse == "true" then
	  rsSettingSide = f.readLine()
	end
	f.close()
	return true
  end
end

function save()
  term.clear()
  drawTitleBar()
  printer.centered("Thank You For Setting Up Digital Lock", 4)
  printer.centered("Your Use Of The Program Is Appreciated", 5)
  printer.centered("Please Report Any Bugs That Aren't Already Reported", 8)
  printer.centered("On MY Forum Page Found On Computercraft", 10)
  printer.centered("Please Wait While We Save Your Settings...", 18)
  printer.centered("Opening File Handler", 19)
  sleep(0)
  local f = fs.open('systemFiles/Programs/dualKeyConfig', "w")
  printer.centered("Handler Established", 19)
  sleep(0)
  printer.centered("Writing Username Data To File", 19)
  sleep(0.5)
  f.writeLine(userNameInput)
  printer.centered("Username Written To File!", 19)
  sleep(0)
  printer.centered("Writing Password To File", 19)
  f.writeLine(passWordInput)
  sleep(0)
  printer.centered("Password Written To File", 19)
  sleep(0)
  printer.centered("Writing Redstone Information To File", 19)
  f.writeLine(rsInput)
  f.writeLine(timeInput)
  f.writeLine(tostring(rsInSetting))
  if rsInSetting then
    f.writeLine(rsInputSide)
  end
  sleep(1)
  printer.centered("Written", 19)
  sleep(0)
  printer.centered("Closing File Handler", 19)
  f.close()
  printer.centered("", 19)
  printer.centered("Your Data Has Been Saved, Rebooting...", 18)
  sleep(2)
  os.reboot()
end

function redstoneConfig()
while true do
  term.clear()
  drawTitleBar()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up Digital Lock", 8)
  printer.centered("What Side Would You Like To RS Output To Be?", 10)
  redstoneText = "Output: "
  term.setCursorPos(termX/2-#redstoneText, 13)
  write(redstoneText)
  local vside = false
		rsInput = read()
		for k,v in pairs(rs.getSides()) do
			if v == rsInput then
				vside = true
				break
			end
		end
		if vside then break end
		  printer.centered("Invalid side!", 14)
		  sleep(0.5)
		  term.clear()
end
		  term.clear()
		  drawTitleBar()
          printer.centered("It Appears You Have Not Used This Program Before", 6)
          printer.centered("Setting Up Digital Lock", 8)
	      printer.centered("How Long would you like the redstone output?",10)
		  timeText = "Output Time: "
		  term.setCursorPos(termX/2-(#timeText), 12)
		  write (timeText)
		  timeInput = readN(2)
		    if not timeInput then
		      printer.centered("Time Must Be Greater That One Second", 13)
		    end
	        RSinSetup()
			if rsInSetting then
			  RSinSideSetup()
			  save()
			else
			  save()
			end
end

function setUsername()
  drawTitleBar()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up Digital Lock", 8)
  printer.centered("Set Your New Username Below", 10)
  waitUserInput = true
  while waitUserInput do
    userNameText = "Username: "
	term.setCursorPos(termX/2-#userNameText, 12)
	write(userNameText)
    userNameInput = readN(15)
	if userNameInput == "" then
	  term.setTextColor(colors.red) 
	  printer.centered("Needs More Than One Character", 13) 
	  sleep(1) 
	  term.setTextColor(colors.white) 
	else 
	  setPassword() 
	end
  end
end

function setPassword()
  term.clear()
  drawTitleBar()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up Digital Lock", 8)
  printer.centered("Set Your New Password Below", 10)
  waitPassInput = true
  while waitPassInput do
    passText = "Password: "
	term.setCursorPos(termX/2-#passText, 12)
	term.clearLine()
	write(passText)
	passWordInput = readN(15, "*")
	  if passWordInput == nil or passWordInput == "" then
	    error "NIL"
	  else
        redstoneConfig()
	  end
  end
end

function removeConfig()
local function removeSet()
  term.clear()
  titleBar.draw("HbombOS Security Suite", "Digital Lock", colors.cyan, 256, 128, 256, 1)
  printer.centered("Type in your administrator password", 4)
  printer.centered("To reset the digital lock configuration", 5)
  local f = fs.open("systemFiles/Security/adminPass", "r")
  adminPassword = f.readLine()
  f.close()
  configText = "Admin Password: "
  term.setCursorPos(termX/2-#configText, 7)
  write(configText)
  adminPasswordInput = read("*")
  if adminPasswordInput == adminPassword then
    return true
  else
    pressed = false
    return false
  end
end

if removeSet() then
  printer.centered("Removing Configuration File", 19)
  sleep(0)
  fs.delete('systemFiles/Programs/dualKeyConfig')
  printer.centered("Removed Config", 19)
  sleep(1)
  os.reboot()
else shell.run('systemFiles/Programs/dualKey') end
end

function waitForSetupKey()
	while true do
	  local event, arg = os.pullEvent()
	  if event == 'setupQue' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or arg == keys.rightAlt then
		pressed = true
		checkKey()
	  	return arg 
		end
	  end
	end
end

function checkKey()
term.setTextColor(1)
term.setBackgroundColor(256)
if not setup then
  if pressed then
    oldX, oldY = term.getCursorPos()
    printer.centered("Type your normal details to continue", 19)
	term.setTextColor(colors.black)
    term.setCursorPos(oldX, oldY)
	term.setBackgroundColor(1)
  else
    oldX, oldY = term.getCursorPos()
    printer.centered("Press [alt] To Change Your Settings", 19)
    term.setCursorPos(oldX, oldY)
	term.setTextColor(colors.black)
	term.setBackgroundColor(1)
  end
end
end

function RedstoneInputReceive()
  while true do
    sleep(0)
	rsReceive = redstone.getInput(rsSettingSide)
	  if rsReceive then
        break
	  end
  end
  return true
end

function Start()
 keyrunning = true
  while keyrunning do
    local key = nil
    local success = false
    parallel.waitForAll(function()success = checkLoginUser() os.queueEvent('setupQue') end, function() key = waitForSetupKey() end)
	  if success and key == keys.leftAlt or key == keys.rightAlt then
		checkKey()
        success = removeConfig()
	  end
	    return success
  end  
end

fileCheck()

while true do
  if rsSettingUse == "true" then
    checkKey()
    parallel.waitForAny(Start, RedstoneInputReceive)
    term.setCursorBlink(false)
	term.setTextColor(1)
	term.setBackgroundColor(256)
    open()
	term.setBackgroundColor(1)
	term.setTextColor(colors.black)
    term.setCursorBlink(true)
	rsReceive = false
    parallel.waitForAny(Start, RedstoneInputReceive)
  else
    Start()
    open()
    Start()
  end
end