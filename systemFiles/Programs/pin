os.pullEvent = os.pullEventRaw --Stop termination outside of loop

termX, termY = term.getSize()

--Assign Text Variables
configText = "PIN: "
rsText = "OutputSide: "
timeText = "OutputTime: "
enterText = "PIN: "

-- Assign Type Variables
_int = 1
_string = ""

-- Starting Variable For PIN Loop
waiting = true
pressed = false

function checkKey()
if not setup then
  if pressed then
    oldX, oldY = term.getCursorPos()
    printer.centered("Type your normal pin to continue", 19)
    term.setCursorPos(oldX, oldY)
  else
    oldX, oldY = term.getCursorPos()
    printer.centered("Press [alt] To Change Your Settings", 19)
    term.setCursorPos(oldX, oldY)
  end
end
end

function check(pass)
  if pass == pin then
    return true
  else
    return false
  end
end

function RSstart(Oside)
  Oside = Oside or back
  rs.setOutput(Oside, true)
  return true
end

function RSstop()
  for i=sideTime, 0, -1 do
    printer.centered("Depowering Redstone In: "..i, 14)
	sleep(1)
	if i <= 0 then
	  rs.setOutput(side, false)
	  return true
	end
  end
end

function checkConfig()
  if not fs.exists("systemFiles/Programs/pinConfig") then --This means the config containing the password isnt created yet
    return false
  else
    return true
  end
end

function thank()
  drawTitleBar()
  printer.centered("Thank You For Setting Up", 4)
  printer.centered("Your PIN Lock", 5)
  printer.centered("Refer To Forums Or README In", 7)
  printer.centered("Your Documentation Directory", 8)
  printer.centered("For More Help.", 9)
  printer.centered("Press ANY Key", 19)
  os.pullEvent("key")
  os.reboot()
end

function RSinSetup()
 while true do
  term.clear()
  drawTitleBar()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up PIN Lock", 8)
  printer.centered("Would You Like The Computer To Act As If",10)
  printer.centered("The Password was Entered If It Receives A",11)
  printer.centered("Redstone Signal On The Designated Side?",12)
  printer.centered("Y/N",12)
  printer.centered("You May Pick Which Side New Step",19)
  ev, arg = os.pullEvent()
   if ev == "key" then
	if arg == keys.y then
	  rsInSetting = true
	  break
	elseif arg == keys.n then
	  rsInSetting = false
	  break
	end
   end
  end
  return
end

function RSinSideSetup()
  while true do
    printer.centered("It Appears You Have Not Used This Program Before", 6)
    printer.centered("Setting Up PIN Lock", 8)
    printer.centered("You Picked That You Would Like The Computer",10)
    printer.centered("To Respond To Redstone As If The Password",11)
    printer.centered("Was Entered, What Side Do You Want The Input",12)
    printer.centered("To Have To Come From?",13)
	term.setCursorPos(termX/2-(#rsText), 15)
	  write (rsText)
	  local vside = false
		rsInputSide = read()
		for k,v in pairs(rs.getSides()) do
			if v == rsInputSide then
				vside = true
				break
			end
		end
		if vside then break end
		  print("Invalid side!")
		  sleep(0.5)
		  term.clear()
		end
	 return true
  end 

function readN(len, replaceChar)
  term.setTextColor(1)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
   checkKey()
        e,p1 = os.pullEvent()
		if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		  p1 = tonumber(p1)
		elseif type(p1) == type(_string) then
		  term.setTextColor(colors.red)
		  printer.centered("Only Numbers! You Entered: "..p1.." Of Type: "..type(p1), 19)
		  return nil
		end
        if e=="char" then
          if #input < len then
		    if type(p1) == type(_int) then
                input = input .. p1
                term.write(replaceChar or p1)
			end
          end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input
end


function drawTitleBar()
  term.clear()
  titleBar.draw("HbombOS Security Suite", "PIN Lock", colors.cyan, 256, 128, 256, 1) --Syntax: Text, Subtext, Text Color, SubText Color, Bg Color, DefaultBGcolor, DefaultTextColor
end

drawTitleBar()

function drawLoginField()

end


if not checkConfig() then  
  setup = true
  waitinput = true
  while waitinput do 
  term.clear()
  drawTitleBar()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up PIN Lock", 8)
  printer.centered("Enter Your NEW Pin, Can Only Be 4 Digits Long!", 10)
  waitinput = true
    term.setCursorPos(termX/2-#configText, 12)
	write(configText)
	term.setTextColor(1)
	pinInput = readN(4, "*")
    if pinInput then
     if #pinInput < 4 then
	  term.setTextColor(colors.red)
      printer.centered("Input Must Be Four Numbers Long", 14)
	 else break end
	end
  end
	  waitinput = false
	  while true do
	  term.clear()
	  drawTitleBar()
      printer.centered("It Appears You Have Not Used This Program Before", 6)
      printer.centered("Setting Up PIN Lock", 8)
	  printer.centered("Enter The Side You Want The Redstone To Emit From?",10)
	  term.setCursorPos(termX/2-(#rsText),12)
	  write (rsText)
	  local vside = false
		rsInput = read()
		for k,v in pairs(rs.getSides()) do
			if v == rsInput then
				vside = true
				break
			end
		end
		if vside then break end
		  print("Invalid side!")
		  sleep(0.5)
		  term.clear()
		end
		  term.clear()
		  drawTitleBar()
          printer.centered("It Appears You Have Not Used This Program Before", 6)
          printer.centered("Setting Up PIN Lock", 8)
	      printer.centered("How Long would you like the redstone output?",10)
		  term.setCursorPos(termX/2-(#timeText), 12)
		  write (timeText)
		  local timeInput = readN(2)
		    if not timeInput then
		      printer.centered("Time Must Be Greater That One Second", 13)
		    end
  RSinSetup()
    if rsInSetting then
	  RSinSideSetup()
	end
  term.clear()
  drawTitleBar()
  printer.centered ("Please Wait While We Save Your Settings...", 6)
  sleep(1)
  local f = fs.open("/systemFiles/Programs/pinConfig", "w")
  f.writeLine(pinInput)
  sleep(0)
  printer.centered("Saved PIN", 7)
  sleep(0)
  f.writeLine(rsInput)
  printer.centered("Saved Redstone Out", 7)
  sleep(0)
  f.writeLine(timeInput)
  printer.centered("Saved Time Ouput", 7)
  sleep(0)
  f.writeLine(tostring(rsInSetting))
  printer.centered("Saved Redstone Input Setting", 7)
  sleep(0)
  if rsInSetting then
    f.writeLine(rsInputSide)
  end
  sleep(0)
  printer.centered("Saved Redstone Input Side", 7)
  sleep(0)
  f.close()
  printer.centered("Saving Root Path", 7)
  sleep(1)
  local f = fs.open("systemFiles/Programs/configuration", "w")
  f.writeLine('systemFiles/Programs/pin')
  thank()
else
  printer.centered("Loading Configuration...", 4)
  sleep(0.5)
  local f = fs.open("systemFiles/Programs/pinConfig", "r")
  pin = f.readLine()
  side = f.readLine()
  sideTime = f.readLine()
  rsInputUse = f.readLine()
  if rsInputUse == "true" then
    rsInputUseSide = f.readLine()
  end
  f.close()
  printer.centered("Loaded!", 4)
  sleep(0)
  
function login()
waiting = true
  while waiting do
    term.clear()
	drawTitleBar()
    term.setTextColor(1)
    printer.centered("HbombOS Security Suite", 4)
    printer.centered("Running PIN LOCK", 5)
    printer.centered("Please Enter The Pin Below", 7)
    term.setCursorPos(termX/2-(#enterText-2), 10)
    write(enterText)
    textIready = readN(4, "*")
	if textIready then
      if check(textIready) then
        printer.centered("Correct PIN", 12)
	    return true
      else
        printer.centered("Incorrect PIN", 12)
      end
	end
  end
end
end

function removeConfig()
local function removeSet()
  term.clear()
  drawTitleBar()
  printer.centered("Type in your administrator password", 4)
  printer.centered("To reset the PIN Lock configuration", 5)
  local f = fs.open("systemFiles/Security/adminPass", "r")
  adminPassword = f.readLine()
  f.close()
  configText = "Admin Password: "
  term.setCursorPos(termX/2-#configText, 7)
  write(configText)
  adminPasswordInput = read("*")
  if adminPasswordInput == adminPassword then
    return true
  else
    return false
  end
end

if removeSet() then
  printer.centered("Removing Configuration File", 19)
  sleep(0)
  fs.delete('systemFiles/Programs/pinConfig')
  printer.centered("Removed Config", 19)
  sleep(1)
  os.reboot()
else pressed = false shell.run('systemFiles/Programs/pin') end
end


function waitForSetupKey()
	while true do
	 checkKey()
	  local event, arg = os.pullEvent()
	  if event == 'setupQue' then
	    return nil
	  elseif event == "key" then
	    if arg == keys.leftAlt or arg == keys.rightAlt then
		pressed = true
		checkKey()
	  	return arg 
		end
	  end
	end
end


function Start()
 setup = false
 keyrunning = true
  while keyrunning do
    local key = nil
    local success = false
    parallel.waitForAll(function()success = login() os.queueEvent('setupQue') end, function() key = waitForSetupKey() end)
	  if success and key == keys.leftAlt or key == keys.rightAlt then
	    setup = true
		checkKey()
        success = removeConfig()
	  end
	    return success
  end  
end

function RedstoneInputReceive()
  while true do
    sleep(0)
	rsReceive = redstone.getInput(rsInputUseSide)
	  if rsReceive then
	    break
	  end
  end
  return true
end

while true do
  if rsInputUse == "true" then
    parallel.waitForAny(Start, RedstoneInputReceive)
    term.setCursorBlink(false)
    RSstart(side)
    RSstop()
    term.setCursorBlink(true)
	rsReceive = false
    rsReceive = redstone.getInput(rsInputUseSide)
   -- parallel.waitForAny(Start, RedstoneInputReceive)
  else
    Start()
    RSstart(side)
    RSstop()
    Start()
  end
end

