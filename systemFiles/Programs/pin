os.pullEvent = os.pullEventRaw --Stop termination outside of loop

termX, termY = term.getSize()

--Assign Text Variables
configText = "PIN: "
rsText = "OutputSide: "
timeText = "OutputTime: "
enterText = "PIN: "

-- Assign Type Variables
_int = 1
_string = ""

-- Starting Variable For PIN Loop
waiting = true

function check(pass)
  if pass == pin then
    return true
  else
    return false
  end
end

function RSstart(Oside)
  if Oside == nil then error "No Side Given" end
  rs.setOutput(Oside, true)
  return true
end

function RSstop()
  for i=sideTime, 0, -1 do
    printer.centered("Depowering Redstone In: "..i, 14)
	sleep(1)
	if i <= 0 then
	  rs.setOutput(side, false)
	  return true
	end
  end
end

function checkConfig()
  if not fs.exists("systemFiles/Programs/pinConfig") then --This means the config containing the password isnt created yet
    return false
  else
    return true
  end
end

function thank()
  drawTitleBar()
  printer.centered("Thank You For Setting Up", 4)
  printer.centered("Your PIN Lock", 5)
  printer.centered("Refer To Forums Or README In", 7)
  printer.centered("Your Documentation Directory", 8)
  printer.centered("For More Help.", 9)
  printer.centered("Press ANY Key", 19)
  os.pullEvent("key")
  os.reboot()
end


function readN(len, replaceChar)
  term.setTextColor(1)
  len = len or 10
  local input=""
  local key = 0
  term.setCursorBlink(true)
  repeat
        e,p1 = os.pullEvent()
		if p1 == "0" or p1 == "1" or p1 == "2" or p1 == "3" or p1 == "4" or p1 == "5" or p1 == "6" or p1 == "7" or p1 == "8" or p1 == "9" then
		  p1 = tonumber(p1)
		elseif type(p1) == type(_string) then
		  term.setTextColor(colors.red)
		  printer.centered("Only Numbers! You Entered: "..p1.." Of Type: "..type(p1), 19)
		  return nil
		end
        if e=="char" then
          if #input < len then
		    if type(p1) == type(_int) then
                input = input .. p1
                term.write(replaceChar or p1)
			end
          end
        elseif e=="key" and p1==keys.backspace and #input > 0 then
          input = input:sub(1,#input-1)
          local x,y = term.getCursorPos()
          term.setCursorPos(x-1,y)
          term.write(" ")
          term.setCursorPos(x-1,y)
        end
  until p1==keys.enter
  term.setCursorBlink(false)
  return input
end


function drawTitleBar()
  term.clear()
  titleBar.draw("HbombOS Security Suite", "PIN Lock", colors.cyan, 256, 128, 256, 1) --Syntax: Text, Subtext, Text Color, SubText Color, Bg Color, DefaultBGcolor, DefaultTextColor
end

drawTitleBar()

function drawLoginField()

end


if not checkConfig() then  
  waitinput = true
  while waitinput do 
  term.clear()
  printer.centered("It Appears You Have Not Used This Program Before", 6)
  printer.centered("Setting Up PIN Lock", 8)
  printer.centered("Enter Your NEW Pin, Can Only Be 4 Digits Long!", 10)
  waitinput = true
    term.setCursorPos(termX/2-#configText, 12)
	write(configText)
	term.setTextColor(1)
	pinInput = readN(4, "*")
    if pinInput then
     if #pinInput < 4 then
	  term.setTextColor(colors.red)
      printer.centered("Input Must Be Four Numbers Long", 14)
	 else break end
	end
  end
	  waitinput = false
	  while true do
	  term.clear()
	  drawTitleBar()
      printer.centered("It Appears You Have Not Used This Program Before", 6)
      printer.centered("Setting Up PIN Lock", 8)
	  printer.centered("Enter The Side You Want The Redstone To Emit From?",10)
	  term.setCursorPos(termX/2-(#rsText),12)
	  write (rsText)
	  local vside = false
		rsInput = read()
		for k,v in pairs(rs.getSides()) do
			if v == rsInput then
				vside = true
				break
			end
		end
		if vside then break end
		  print("Invalid side!")
		  sleep(0.5)
		  term.clear()
		end
		  term.clear()
		  drawTitleBar()
          printer.centered("It Appears You Have Not Used This Program Before", 6)
          printer.centered("Setting Up PIN Lock", 8)
	      printer.centered("How Long would you like the redstone output?",10)
		  term.setCursorPos(termX/2-(#timeText), 12)
		  write (timeText)
		  local timeInput = readN(2)
		    if not timeInput then
		      printer.centered("Time Must Be Greater That One Second", 13)
		    end
  term.clear()
  drawTitleBar()
  printer.centered ("Please Wait While We Save Your Settings...", 6)
  sleep(1)
  local f = fs.open("/systemFiles/Programs/pinConfig", "w")
  f.writeLine(pinInput)
  sleep(0)
  printer.centered("Saved PIN", 7)
  sleep(0)
  f.writeLine(rsInput)
  printer.centered("Saved Redstone Out", 7)
  sleep(0)
  f.writeLine(timeInput)
  printer.centered("Saved Time Ouput", 7)
  sleep(0)
  f.close()
  printer.centered("Saving Root Path", 7)
  sleep(1)
  local f = fs.open("systemFiles/Programs/configuration", "w")
  f.writeLine('systemFiles/Programs/pin')
  thank()
else
  printer.centered("Loading Configuration...", 4)
  sleep(0.5)
  local f = fs.open("systemFiles/Programs/pinConfig", "r")
  pin = f.readLine()
  side = f.readLine()
  sideTime = f.readLine()
  f.close()
  printer.centered("Loaded!", 4)
  sleep(0)
  while waiting do
    term.clear()
	drawTitleBar()
    term.setTextColor(1)
    printer.centered("HbombOS Security Suite", 4)
    printer.centered("Running PIN LOCK", 5)
    printer.centered("Please Enter The Pin Below", 7)
    term.setCursorPos(termX/2-(#enterText-2), 10)
    write(enterText)
    textIready = readN(4, "*")
	if textIready then
      if check(textIready) then
        printer.centered("Correct PIN", 12)
	    RSstart(side)
	    RSstop()
	    waiting = false
	    shell.run ("systemFiles/Programs/pin")
      else
        printer.centered("Incorrect PIN", 12)
      end
	end
  end
end